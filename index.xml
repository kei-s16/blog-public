<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>blog</title><link>/</link><description>Recent content on blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 21 Feb 2022 01:00:00 +0900</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Github PagesにHugoをデプロイする</title><link>/posts/hugo-on-github-pages/</link><pubDate>Mon, 21 Feb 2022 01:00:00 +0900</pubDate><guid>/posts/hugo-on-github-pages/</guid><description>目次 前置き 背景 選定 やっていき 設計 実装 Hugo GitHubActions GitHub Pagesの設定 完走した感想 前置き 背景 gistなどで管理していたもろもろのメモをもうちょっときれいに見せたくなったので、ブログ形式で残すことにしました。 が、今日日どっかのブログサービスもなーでも自前でWordPressなんかもちょっとキツいなーという感じです。 これだけで伝わらないと思うので、気持ち的な要件をリストアップすると、こんな感じ。 テキストがブラウザ</description><content>&lt;h2 id="目次">目次&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="#%E5%89%8D%E7%BD%AE%E3%81%8D">前置き&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#%E8%83%8C%E6%99%AF">背景&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%81%B8%E5%AE%9A">選定&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#%E3%82%84%E3%81%A3%E3%81%A6%E3%81%84%E3%81%8D">やっていき&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#%E8%A8%AD%E8%A8%88">設計&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%AE%9F%E8%A3%85">実装&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#hugo">Hugo&lt;/a>&lt;/li>
&lt;li>&lt;a href="#github-actions">GitHubActions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#github-pages%E3%81%AE%E8%A8%AD%E5%AE%9A">GitHub Pagesの設定&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#%E5%AE%8C%E8%B5%B0%E3%81%97%E3%81%9F%E6%84%9F%E6%83%B3">完走した感想&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="前置き">前置き&lt;/h2>
&lt;h3 id="背景">背景&lt;/h3>
&lt;p>gistなどで管理していたもろもろのメモをもうちょっときれいに見せたくなったので、ブログ形式で残すことにしました。&lt;br>
が、今日日どっかのブログサービスもなーでも自前でWordPressなんかもちょっとキツいなーという感じです。&lt;br>
これだけで伝わらないと思うので、気持ち的な要件をリストアップすると、こんな感じ。&lt;/p>
&lt;ol>
&lt;li>テキストがブラウザ上で快適に読める状態であればそれでいい。コメントとかいらない。&lt;/li>
&lt;li>特定のサービスに依存する形にしたくない。なにかあったときは最悪自前で気楽に(ここ重要)ホスティングできるようにしたい。&lt;/li>
&lt;li>セキュリティ周りをなるべく意識したくない。ログイン画面隠したりCMSのバージョン気にしたりしたくない。&lt;/li>
&lt;/ol>
&lt;p>もうこれ、静的サイトジェネレーター(SSG)しかないじゃん、ということで、そうしました。&lt;/p>
&lt;h3 id="選定">選定&lt;/h3>
&lt;p>候補は2つありました。&lt;br>
1つは&lt;a href="https://www.getzola.org/">Zola&lt;/a>。Rust製のSSGツールになります。&lt;br>
もうひとつは&lt;a href="https://gohugo.io/">Hugo&lt;/a>。こちらはGo製。&lt;br>
どちらもmarkdownのテキストファイルからブログの形をしたhtmlを吐き出してくれるツールです。&lt;br>
ドキュメントをさっと読んだ感じではZolaもHugoも機能的にはあまり差がなさそうでした。開発の活発度合いも変わりなく、強いて言えば数年先行しているHugoのほうが英語・日本語ともにドキュメントが見つかりやすい雰囲気です。&lt;br>
&lt;del>宗教&lt;/del>好みで言えばZolaですが、今回はサクっとやってしまいたかったので、Hugoをチョイスしました。&lt;/p>
&lt;p>サーバというか配信にはGitHub Pagesを使用することにします。&lt;br>
無料だしGitHub Actionsでいろいろできるし、なにより必然的にGitHubリポジトリで管理する = 手持ちの端末どれからでも投稿ができる。&lt;/p>
&lt;h2 id="やっていき">やっていき&lt;/h2>
&lt;h3 id="設計">設計&lt;/h3>
&lt;p>&lt;img src="/images/hugo-on-github-pages/githubpages.png" alt="全体の図">&lt;/p>
&lt;p>こんな感じにすることにします。&lt;br>
mdファイル(というかソース)を管理するリポジトリと、公開用のリポジトリを分けているのは、なんとなくです。分ける必要もないと思うっちゃ思うのですが、せっかくだからわけることにしました。やったことでゴミみたいなコミットしてるのが外には見えないのでそれはメリットかも。&lt;/p>
&lt;h3 id="実装">実装&lt;/h3>
&lt;h4 id="hugo">Hugo&lt;/h4>
&lt;p>Hugo側の設定はあまり気にすることがありません。&lt;br>
強いて言えばテーマをどう管理するかくらいですが、外部テーマを使う場合はgit submoduleを使うことが推奨されているようです。&lt;br>
今回私が選んだテーマは&lt;a href="https://github.com/panr/hugo-theme-terminal">panr/hugo-theme-terminal&lt;/a>です。こちらもREADMEにて手の込んだ改変をしない限りはgit submoduleを使うことを推奨していました。テーマを触る気はいまのところあんまりないので、submoduleを利用するパターンを採用します。&lt;/p>
&lt;h4 id="github-actions">GitHub Actions&lt;/h4>
&lt;p>GitHub Actions、つまりはデプロイ=記事の投稿です。&lt;br>
&lt;a href="https://rmoff.net/2020/12/20/scheduling-hugo-builds-on-github-pages-with-github-actions/">Scheduling Hugo Builds on GitHub pages with GitHub Actions&lt;/a>という記事を参考に、ちょっと手を入れたデプロイを組んでいます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">push&lt;/span>:
&lt;span style="color:#f92672">branches&lt;/span>:
- &lt;span style="color:#ae81ff">main&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">build-and-deploy&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">checkout source&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">submodules&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">remove .gitignore&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">rm ./.gitignore&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">setup hugo&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;latest&amp;#39;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">build&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --minify&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">copy verify files to public&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">cp ./verify/* ./public&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">deploy&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v3&lt;/span>
&lt;span style="color:#f92672">if&lt;/span>: &lt;span style="color:#ae81ff">${{ github.ref == &amp;#39;refs/heads/main&amp;#39; }}&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">deploy_key&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/span>
&lt;span style="color:#f92672">external_repository&lt;/span>: &lt;span style="color:#ae81ff">kei-s16/kei-s16.github.io&lt;/span>
&lt;span style="color:#f92672">publish_dir&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;span style="color:#f92672">publish_branch&lt;/span>: &lt;span style="color:#ae81ff">main&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>やっていることは元記事と同じくhugoでビルドして、公開用リポジトリにpushしているだけです。&lt;br>
違うところはといえば、&lt;/p>
&lt;ul>
&lt;li>私の場合はgitignoreでソースリポジトリに生成物を持たない(public以下を持たない)ようにしているため、そこをごにょごにょするための処理を追加した&lt;/li>
&lt;li>GitHub Pagesで独自ドメインを当てたり、keybaseの認証をしたりするのに必要なファイル(verify以下)を一緒にデプロイしている&lt;/li>
&lt;li>公開リポジトリには生成物(public以下)しか持たないようにした&lt;/li>
&lt;/ul>
&lt;p>の3点です。&lt;br>
上記のコードにより、mainブランチにmdファイルやらなにやらをマージすることで、公開リポジトリにhtmlファイルを送りつけてくれるようになりました。&lt;/p>
&lt;h4 id="github-pagesの設定">GitHub Pagesの設定&lt;/h4>
&lt;p>&lt;code>{ユーザ名}.github.io&lt;/code>ドメインのままで問題なければ、リポジトリのsettingsからpagesを有効にするだけです。&lt;br>
独自ドメインを当てたい場合は公式ドキュメントを参考にしつつ、&lt;code>{ユーザ名}.github.io&lt;/code> に対する独自ドメインのCNAMEレコードを作成してください。&lt;br>
注意が必要なのが、ドメインの検証に時間がかかることと、HTTPSでの接続を有効にするのにさらに時間がかかることです。時間に余裕を持って作業しましょう。&lt;/p>
&lt;h2 id="完走した感想">完走した感想&lt;/h2>
&lt;ul>
&lt;li>Pull-Requestベースで管理できるのめっちゃ楽&lt;/li>
&lt;li>vimで書けるのめっちゃ楽&lt;/li>
&lt;li>DBのバージョンとかPHPのバージョンとかCMSのバージョンとかプラグインのバージョンとか気にしなくていいのほんと楽&lt;/li>
&lt;/ul></content></item><item><title>2021年のふりかえり</title><link>/posts/furikaeri-2021/</link><pubDate>Fri, 31 Dec 2021 20:00:00 +0900</pubDate><guid>/posts/furikaeri-2021/</guid><description>移植 : https://gist.github.com/kei-s16/b84ab3aa76c47d3adf84c540c3c39f98 tl;dr バックエンドエンジニア（自称）からおおむねインフラエンジニアになりました 自宅開発環境を大進化させました 仕事 まず大きな変更についてです。 去年はPHPでアプリを書いていましたが、今年の1月から異動になり、業務領域の軸足をインフラ（クラウド）側に移すことになりました。 領域的には大移動ですが、異動が告知された段階である程度の基礎知識はあったので、かなり厳しい量のキャッチアップを強いられる、といっ</description><content>&lt;p>移植 : &lt;a href="https://gist.github.com/kei-s16/b84ab3aa76c47d3adf84c540c3c39f98">https://gist.github.com/kei-s16/b84ab3aa76c47d3adf84c540c3c39f98&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="tldr">tl;dr&lt;/h2>
&lt;ul>
&lt;li>バックエンドエンジニア（自称）からおおむねインフラエンジニアになりました&lt;/li>
&lt;li>自宅開発環境を大進化させました&lt;/li>
&lt;/ul>
&lt;h2 id="仕事">仕事&lt;/h2>
&lt;p>まず大きな変更についてです。&lt;br>
去年はPHPでアプリを書いていましたが、今年の1月から異動になり、業務領域の軸足をインフラ（クラウド）側に移すことになりました。&lt;br>
領域的には大移動ですが、異動が告知された段階である程度の基礎知識はあったので、かなり厳しい量のキャッチアップを強いられる、といったことはありませんでした。&lt;br>
ある程度のぼやかしを加えてやったことを思い起こすと&lt;/p>
&lt;ul>
&lt;li>稼動しているwebサービスのインフラterraform化とAWSアカウント移行&lt;/li>
&lt;li>新規インフラの構築複数&lt;/li>
&lt;li>メンテナが不在になってしまったサービスの現状把握複数&lt;/li>
&lt;/ul>
&lt;p>などをやっていました。&lt;br>
その他にもAnsibleなどの管理ツールや社内アプリの細かな改修、サイトリニューアルのお手伝い、障害対応にも取り組みました。&lt;/p>
&lt;p>技術スタックとしては&lt;/p>
&lt;ul>
&lt;li>Terraform&lt;/li>
&lt;li>Ansible
&lt;ul>
&lt;li>Ansistrano&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GitHub Actions&lt;/li>
&lt;li>Docker&lt;/li>
&lt;li>AWS
&lt;ul>
&lt;li>VPC関連&lt;/li>
&lt;li>ECS&lt;/li>
&lt;li>CloudFormation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>このあたりが身についたかなと思います。&lt;br>
特に、AnsibleとDockerは自宅サーバの運用と相互にフィードバックできたのでうま味がありました。&lt;/p>
&lt;p>また、チーム移動に際して、以前のチームの文化をいくつか持ち込みました。&lt;br>
そのなかでも週次ふりかえりは既存メンバーにも好評ですし、効果としても各々が感じていたぼんやりとした不安を目に見える課題として取り組めるようになるなど、それなりに機能させられているかなと思います。&lt;br>
もちろん、まだまだ課題が残っている状態ではあるので、引き続き改善していきたいです。&lt;/p>
&lt;p>人周りについても、後輩が入ってきたりお世話になった方が退職されたりいろいろありました。&lt;br>
後輩に関しては既にインフラ周りで追い抜かれつつあったりしているので&lt;del>背後から圧を感じつつ&lt;/del>いい感じにモチベーション源になっています。&lt;/p>
&lt;h2 id="個人">個人&lt;/h2>
&lt;h3 id="k8s">k8s&lt;/h3>
&lt;p>入門しました。&lt;br>
archlinux ARM on Raspberry Pi 4 * 4 でARMな感じのClusterを作成し、日々壊しつつ個人ツール群を運用しています。&lt;br>
依存パッケージの変更で泣かされ、クラスタバージョンアップの実施で泣かされ、とわりと泣かされつつもk8sっぽいことはひと通りやってみて、手触りとしては悪くないな……という感じです。&lt;br>
EKSやGKEなどのManagedな感じのk8sはまたちょっと勝手が違うようなのでそのうちそちらも触ってみたいなーと思っています。&lt;/p>
&lt;h3 id="proxmox">proxmox&lt;/h3>
&lt;p>導入しました。&lt;br>
が、退役させました。&lt;br>
ESXiのような仮想化基盤が欲しいなーと思って組んでみたのですが、ちょっと帯に短し襷に長しな感じがしたためです（あと、Debianベースなのがつらかった）。&lt;br>
とはいえ、作業用に使い捨てのarchをぽこぽこ生やせるのは体験としてとてもよかったので、どこかで再チャレンジしてみたいなーと思います。&lt;br>
2台以上のクラスタ、分散ストレージの利用、Cloudinitの活用ができればたぶんもっといけるはず（やれてなかった）。&lt;/p>
&lt;h3 id="自宅サーバ">自宅サーバ&lt;/h3>
&lt;p>すべてarchlinuxに統一しました。Ansibleすっきりさせられてよかった。&lt;br>
が、なぜか台数が増えてきてしまったので、そろそろLDAPかなにかを導入せねば、という重すぎる課題が残ってしまいました。ガンバルゾー&lt;br>
また、外からアクセスするためにtailscaleを使い始めました。こちらも便利なので、VPN利用を検討している方にはとりあえずおすすめしています。&lt;/p>
&lt;h3 id="開発環境">開発環境&lt;/h3>
&lt;p>&lt;del>Macが嫌いなので&lt;/del> Windowsでも開発できたら考えることが減るので、ということで、個人開発環境を下記に変えました。&lt;/p>
&lt;ul>
&lt;li>archlinuxなLinuxデスクトップ&lt;/li>
&lt;li>Windows 11 + scoop + msys2 + zsh&lt;/li>
&lt;/ul>
&lt;p>使い分けとしては、サクっとやるときはメインのWindows機で、がっつりやるときはそこから別マシンのLinuxへSSH or Linuxデスクトップで開発しています。&lt;br>
Windowsが10からLinuxに寄せてきているのもあり、CUIの中では基本手触りが同じなので、へんな切り替えコストが減ってだいぶ楽になりました。&lt;br>
ほぼ10年もののMBPもこれで退役です。&lt;/p>
&lt;h3 id="その他">その他&lt;/h3>
&lt;p>Rustでなんか書いたり他人のツールリポジトリにコミットしたりしました。あとはだいたいシェル芸。&lt;br>
それから、OSSの団体や開発者への寄付を始めました。いろいろと、これがないと困る！　というくらいには依存しているので、日頃の感謝を込めて。&lt;/p>
&lt;h2 id="開発以外">開発以外&lt;/h2>
&lt;ul>
&lt;li>ミニ四駆始めました&lt;/li>
&lt;li>バイク買いました&lt;/li>
&lt;/ul></content></item><item><title>k8s Cluster on Raspberry Pi</title><link>/posts/k8s-cluster-on-raspberry-pi/</link><pubDate>Wed, 10 Feb 2021 20:00:00 +0900</pubDate><guid>/posts/k8s-cluster-on-raspberry-pi/</guid><description>kei-s16/k8s-arch-rpi-cluster.md を元に加筆・修正を行ったものです 基本的に2021年頭の情報になっており、すでに時代遅れであったり、間違いに気づいて実際の運用では改善済のものが記事には含まれています なにやったのか？ rpi4 * 3 で k8s クラスタを作る 構成 rpi 4 (4GB) Arch Linux (ARM) 作業環境 Raspbianイメージ焼くところ Windowsの世界 もろもろの雑用 Arch on WSL2 kei@Win-Desktop-wsl OS: Arch Linux on Windows 10 x86_64 Kernel: 5.4.72-microsoft-standard-WSL2 Shell: zsh 5.8 CPU: AMD Ryzen 7 3800X (16) @ 3.892GHz Memory: 279MiB / 12733MiB ArchLinux for ARM64がんばるところ Raspbian(32bit) Kubernet</description><content>&lt;p>&lt;a href="https://gist.github.com/kei-s16/91cc87b127f38cfed28fe625ae8c9ba9">kei-s16/k8s-arch-rpi-cluster.md&lt;/a> を元に加筆・修正を行ったものです&lt;br>
基本的に2021年頭の情報になっており、すでに時代遅れであったり、間違いに気づいて実際の運用では改善済のものが記事には含まれています&lt;/p>
&lt;hr>
&lt;h2 id="なにやったのか">なにやったのか？&lt;/h2>
&lt;p>rpi4 * 3 で k8s クラスタを作る&lt;/p>
&lt;h2 id="構成">構成&lt;/h2>
&lt;ul>
&lt;li>rpi 4 (4GB)
&lt;ul>
&lt;li>Arch Linux (ARM)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="作業環境">作業環境&lt;/h2>
&lt;h3 id="raspbianイメージ焼くところ">Raspbianイメージ焼くところ&lt;/h3>
&lt;p>Windowsの世界&lt;/p>
&lt;h3 id="もろもろの雑用">もろもろの雑用&lt;/h3>
&lt;p>Arch on WSL2&lt;/p>
&lt;pre tabindex="0">&lt;code>kei@Win-Desktop-wsl
OS: Arch Linux on Windows 10 x86_64
Kernel: 5.4.72-microsoft-standard-WSL2
Shell: zsh 5.8
CPU: AMD Ryzen 7 3800X (16) @ 3.892GHz
Memory: 279MiB / 12733MiB
&lt;/code>&lt;/pre>&lt;h3 id="archlinux-for-arm64がんばるところ">ArchLinux for ARM64がんばるところ&lt;/h3>
&lt;p>Raspbian(32bit)&lt;/p>
&lt;h3 id="kubernetesがんばるところ">Kubernetesがんばるところ&lt;/h3>
&lt;p>ArchLinux ARM(64bit) on Raspberry Pi&lt;/p>
&lt;h2 id="作業手順">作業手順&lt;/h2>
&lt;h3 id="下準備フェイズ">下準備フェイズ&lt;/h3>
&lt;ol>
&lt;li>組み立てやってテンション上げる&lt;/li>
&lt;li>メインのLANにぶらさげるLANのセットアップ&lt;/li>
&lt;li>Raspbian を headlessでインストール
&lt;ol>
&lt;li>ルータに有線で接続してssh
&lt;ol>
&lt;li>新ユーザ作ってpiユーザ消す&lt;/li>
&lt;li>パスワード→鍵認証はやらない(raspbianをこのあと使わないので)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Raspbian 上 で ArchLinux ARM を焼く&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># $はすべて sudo&lt;/span>
$ fdisk /dev/sda
&lt;span style="color:#75715e"># いいかんじにパーティション切る&lt;/span>
$ mkfs.vfat /dev/sda1
$ mkdir boot
$ mount /dev/sda1 boot
$ mkfs.ext4 /dev/sda2
$ mkdir root
$ mount /dev/sda2 root
&lt;span style="color:#75715e"># イメージ落とす&lt;/span>
$ wget http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-aarch64-latest.tar.gz
&lt;span style="color:#75715e"># ここから先はsuする&lt;/span>
$ su
% bsdtar -xpf ArchLinuxARM-rpi-4-latest.tar.gz -C root
% sync
&lt;span style="color:#75715e"># 64bit かつ rpi4 なので&lt;/span>
% sed -i &lt;span style="color:#e6db74">&amp;#39;s/mmcblk0/mmcblk1/g&amp;#39;&lt;/span> root/etc/fstab
% mv root/boot/* boot
&lt;span style="color:#75715e"># マウントしたらちゃんとアンマウントしようね&lt;/span>
% umount boot root
&lt;span style="color:#75715e"># これを3セット (さらに別用途で+1セットやったのは秘密)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="本作業フェイズ">本作業フェイズ&lt;/h3>
&lt;h4 id="各マシンにホスト名ふったりユーザ作ったり">各マシンにホスト名ふったりユーザ作ったり&lt;/h4>
&lt;ul>
&lt;li>&lt;code>pacman -Syyu&lt;/code> めっちゃ重い(国内ミラーなさそう)&lt;/li>
&lt;li>&lt;code>pacman -S sudo&lt;/code>&lt;/li>
&lt;li>ホスト名変えた
&lt;ul>
&lt;li>kisaragi&lt;/li>
&lt;li>mogami&lt;/li>
&lt;li>kumano&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>sudoersいじった&lt;/li>
&lt;li>公開鍵認証以外封じた&lt;/li>
&lt;/ul>
&lt;h4 id="kubernetesまわりガーっとインストール">Kubernetesまわりガーっとインストール&lt;/h4>
&lt;ul>
&lt;li>Ansibleでやろうとしたが、pacmanだけでなくyayも使うのでちょっと厳しかった
&lt;ul>
&lt;li>ので横着してシェルスクリプト書いたが横着しすぎてコケた
&lt;ul>
&lt;li>ので最終的に半手作業……&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e">#!/bin/bash -eu
&lt;/span>&lt;span style="color:#75715e">&lt;/span>pacman -S git base base-devel --noconfirm
mkdir ~/build/
cd ~/build
git clone https://aur.archlinux.org/yay.git
cd ~/build/yay
makepkg -si --noconfirm
cd ~/
yay -S docker kubelet-bin kubeadm-bin kubectl-bin ebtables ethtool socat conntrack-tools cni-plugins --noconfirm
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="kubernetesセットアップ">Kubernetesセットアップ&lt;/h4>
&lt;h5 id="全体構成">全体構成&lt;/h5>
&lt;ul>
&lt;li>kisaragi : Master&lt;/li>
&lt;li>mogami : node&lt;/li>
&lt;li>kumano : node&lt;/li>
&lt;/ul>
&lt;p>お船じゃないよ&lt;/p>
&lt;h5 id="kisaragiのセットアップ前半戦">kisaragiのセットアップ前半戦&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo kubeadm init --pod-network-cidr&lt;span style="color:#f92672">=&lt;/span>10.244.0.0/16
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown &lt;span style="color:#66d9ef">$(&lt;/span>id -u&lt;span style="color:#66d9ef">)&lt;/span>:&lt;span style="color:#66d9ef">$(&lt;/span>id -g&lt;span style="color:#66d9ef">)&lt;/span> $HOME/.kube/config
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="mogami--kumanoのセットアップ">mogami &amp;amp; kumanoのセットアップ&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo systemctl enable kubelet.service
sudo systemctl start kubelete.service
sudo kubeadm join &lt;span style="color:#f92672">{&lt;/span>いろんなひみつのオプション&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="kisaragiのセットアップ後半戦">kisaragiのセットアップ後半戦&lt;/h5>
&lt;p>クラスターにノードを参加させる&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">kubectl label node mogami node-role.kubernetes.io/worker&lt;span style="color:#f92672">=&lt;/span>worker
kubectl label node kumano node-role.kubernetes.io/worker&lt;span style="color:#f92672">=&lt;/span>worker
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">kisaragi% kubectl version
Client Version: version.Info&lt;span style="color:#f92672">{&lt;/span>Major:&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>, Minor:&lt;span style="color:#e6db74">&amp;#34;20&amp;#34;&lt;/span>, GitVersion:&lt;span style="color:#e6db74">&amp;#34;v1.20.2&amp;#34;&lt;/span>, GitCommit:&lt;span style="color:#e6db74">&amp;#34;faecb196815e248d3ecfb03c680a4507229c2a56&amp;#34;&lt;/span>, GitTreeState:&lt;span style="color:#e6db74">&amp;#34;clean&amp;#34;&lt;/span>, BuildDate:&lt;span style="color:#e6db74">&amp;#34;2021-01-13T13:28:09Z&amp;#34;&lt;/span>, GoVersion:&lt;span style="color:#e6db74">&amp;#34;go1.15.5&amp;#34;&lt;/span>, Compiler:&lt;span style="color:#e6db74">&amp;#34;gc&amp;#34;&lt;/span>, Platform:&lt;span style="color:#e6db74">&amp;#34;linux/arm64&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
Server Version: version.Info&lt;span style="color:#f92672">{&lt;/span>Major:&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>, Minor:&lt;span style="color:#e6db74">&amp;#34;20&amp;#34;&lt;/span>, GitVersion:&lt;span style="color:#e6db74">&amp;#34;v1.20.2&amp;#34;&lt;/span>, GitCommit:&lt;span style="color:#e6db74">&amp;#34;faecb196815e248d3ecfb03c680a4507229c2a56&amp;#34;&lt;/span>, GitTreeState:&lt;span style="color:#e6db74">&amp;#34;clean&amp;#34;&lt;/span>, BuildDate:&lt;span style="color:#e6db74">&amp;#34;2021-01-13T13:20:00Z&amp;#34;&lt;/span>, GoVersion:&lt;span style="color:#e6db74">&amp;#34;go1.15.5&amp;#34;&lt;/span>, Compiler:&lt;span style="color:#e6db74">&amp;#34;gc&amp;#34;&lt;/span>, Platform:&lt;span style="color:#e6db74">&amp;#34;linux/arm64&amp;#34;&lt;/span>&lt;span style="color:#f92672">}}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="なんかpod動かしてみる">なんかpod動かしてみる&lt;/h4>
&lt;p>オレオレDocker Registry置くことにした&lt;/p>
&lt;p>deployment.yml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">---
&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">docker-registry&lt;/span>
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">docker-registry&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">selector&lt;/span>:
&lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">docker-registry&lt;/span>
&lt;span style="color:#f92672">template&lt;/span>:
&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;span style="color:#f92672">labels&lt;/span>:
&lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">docker-registry&lt;/span>
&lt;span style="color:#f92672">spec&lt;/span>:
&lt;span style="color:#f92672">hostNetwork&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">tolerations&lt;/span>:
- &lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">node-role.kubernetes.io/master&lt;/span>
&lt;span style="color:#f92672">effect&lt;/span>: &lt;span style="color:#ae81ff">NoSchedule&lt;/span>
&lt;span style="color:#f92672">nodeSelector&lt;/span>:
&lt;span style="color:#f92672">kubernetes.io/hostname&lt;/span>: &lt;span style="color:#ae81ff">kisaragi&lt;/span>
&lt;span style="color:#f92672">containers&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">docker-registry&lt;/span>
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">registry:2.7.1&lt;/span>
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">5000&lt;/span>
&lt;span style="color:#f92672">volumeMounts&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">registry&lt;/span>
&lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#ae81ff">/var/lib/registry&lt;/span>
&lt;span style="color:#f92672">volumes&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">registry&lt;/span>
&lt;span style="color:#f92672">hostPath&lt;/span>:
&lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">Directory&lt;/span>
&lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/mnt/exthdd/registry&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>これをデプロイして、外からpull &amp;amp; pushしてみる&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo docker pull hello-world
sudo docker tag hello-world kisaragi.local:5000/hello-world
sudo docker push kisaragi.local:5000/hello-world
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>動いた！&lt;/strong>&lt;/p>
&lt;h2 id="その他もろもろ">その他もろもろ&lt;/h2>
&lt;h3 id="つらかったこと">つらかったこと&lt;/h3>
&lt;ul>
&lt;li>アップデートで再起動かけたら &lt;code>kubectl&lt;/code> コケた
&lt;ul>
&lt;li>masterで &lt;code>systemctl enable kubelet&lt;/code> 忘れてた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>一瞬世界から孤立したサーバを産み落としてしまった
&lt;ul>
&lt;li>&lt;code>~/.ssh/authorized_keys&lt;/code> を消してしまった&lt;/li>
&lt;li>別マシンでSDカードをマウントして &lt;code>authorized_keys&lt;/code> を作ることでごまかした
&lt;ul>
&lt;li>&lt;code>chmod {ユーザ名}:sudo authorized_keys&lt;/code> 忘れずにね&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="やらなかったこと今後やりたいこと">やらなかったこと(今後やりたいこと)&lt;/h3>
&lt;ul>
&lt;li>PoE(USBケーブル邪魔じゃね？)&lt;/li>
&lt;li>ノード台数の拡張&lt;/li>
&lt;li>無線LANルータがちょっと残念だったので改善
&lt;ul>
&lt;li>ラズパイルータにしちゃう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="結論">結論&lt;/h2>
&lt;ul>
&lt;li>ArchLinuxはいいぞ&lt;/li>
&lt;li>k8sはいいぞ&lt;/li>
&lt;li>横着はよくないぞ&lt;/li>
&lt;/ul>
&lt;h2 id="参考記事">参考記事&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-4">Raspberry Pi 4 | ArchLinux ARM&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/tomotomo/items/2ff445377c13f9db38e2">Raspberry Pi 4 のMACアドレスの範囲が変わったぞ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developers.cyberagent.co.jp/blog/archives/14721/">3日間クッキング【Kubernetes のラズペリーパイ包み　“サイバーエージェント風】&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/go_vargo/items/d1271ab60f2bba375dcc">Raspberry PiでおうちKubernetes構築【物理編】&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/go_vargo/items/29f6d832ea0a289b4778">Raspberry PiでおうちKubernetes構築【論理編】&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/temeteke/items/04960c96edee113bd053">Raspberry Pi 4とArch Linux(64bit)で作るKubernetesクラスタ)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sminamot-dev.hatenablog.com/entry/2020/01/26/111949">Raspberry Pi 4 でおうちk8sクラスタを構築する&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/yuyakato/items/c5b1b1293c5879e231ab">おうちk8sクラスタを作る: Dockerレジストリ編&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="補足">補足&lt;/h2>
&lt;p>重要なものだけ補足&lt;/p>
&lt;blockquote>
&lt;p>pacman -Syyu めっちゃ重い(国内ミラーなさそう)&lt;/p>
&lt;/blockquote>
&lt;p>という記述がありましたが、2021/11/18にAsahi Linuxが国内ミラーを作成してくれました！&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">We noticed that there was no Arch Linux ARM mirror in Japan, so we&amp;#39;re sponsoring one now 😊&lt;br>&lt;br>If you&amp;#39;re in Japan or nearby, feel free to point your pacman.d/mirrorlist at &lt;a href="https://t.co/GM69rZE3tC">https://t.co/GM69rZE3tC&lt;/a>!&lt;a href="https://t.co/erKHtHwFfX">https://t.co/erKHtHwFfX&lt;/a> &lt;a href="https://t.co/m0opnupc5i">pic.twitter.com/m0opnupc5i&lt;/a>&lt;/p>&amp;mdash; Asahi Linux (@AsahiLinux) &lt;a href="https://twitter.com/AsahiLinux/status/1461268746878656513?ref_src=twsrc%5Etfw">November 18, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>systemctl timer unitを使ってcronを置き換えたときのメモ</title><link>/posts/use-systemd-timer-instead-of-crond/</link><pubDate>Wed, 17 Jun 2020 20:00:00 +0900</pubDate><guid>/posts/use-systemd-timer-instead-of-crond/</guid><description>移植 : https://gist.github.com/kei-s16/eb5eb5f6657e17eb8e9a422c167e62e0 概略 systemdのユニットを定期的に再起動するために 再起動用のサービスユニット 上記ユニットのタイマーユニット を作成し、ついでに実行時にwebhookを使ってDiscordに通知を飛ばす 前提とかおことわりとか Indigo(6vCPU, 8GB)上のUbuntu 18.04で動かしています。 今回定期的に再起動したいサービスユニットは、ARKのプライベートサーバ 上記のサービスユニットをこの記事では(wikiと同じく)ar</description><content>&lt;p>移植 : &lt;a href="https://gist.github.com/kei-s16/eb5eb5f6657e17eb8e9a422c167e62e0">https://gist.github.com/kei-s16/eb5eb5f6657e17eb8e9a422c167e62e0&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="概略">概略&lt;/h3>
&lt;p>systemdのユニットを定期的に再起動するために&lt;/p>
&lt;ul>
&lt;li>再起動用のサービスユニット&lt;/li>
&lt;li>上記ユニットのタイマーユニット&lt;/li>
&lt;/ul>
&lt;p>を作成し、ついでに実行時にwebhookを使ってDiscordに通知を飛ばす&lt;/p>
&lt;h3 id="前提とかおことわりとか">前提とかおことわりとか&lt;/h3>
&lt;ul>
&lt;li>Indigo(6vCPU, 8GB)上のUbuntu 18.04で動かしています。&lt;/li>
&lt;li>今回定期的に再起動したいサービスユニットは、&lt;a href="https://ark.gamepedia.com/Dedicated_Server_Setup">ARKのプライベートサーバ&lt;/a>&lt;/li>
&lt;li>上記のサービスユニットをこの記事では(wikiと同じく)&lt;code>ark-dedicated.service&lt;/code>という名前で登録しています。別名で登録している場合や別のユニットを対象とする場合は適宜読み替えてください。&lt;/li>
&lt;li>systemdまわりめちゃくちゃ浅い理解で書いてます。&lt;/li>
&lt;li>コケたときのことはなにも考えてません。&lt;/li>
&lt;/ul>
&lt;h3 id="まずは定期的に再起動するように">まずは定期的に再起動するように&lt;/h3>
&lt;h4 id="再起動用のサービスユニットを作る">再起動用のサービスユニットを作る&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-restart-ark-dedicated.service" data-lang="restart-ark-dedicated.service">&lt;span style="color:#66d9ef">[Unit]&lt;/span>
&lt;span style="color:#a6e22e">Description&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">Restart ark-dedicated.service&lt;/span>
&lt;span style="color:#66d9ef">[Service]&lt;/span>
&lt;span style="color:#a6e22e">Type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">oneshot&lt;/span>
&lt;span style="color:#a6e22e">ExecStart&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">/bin/systemctl try-restart ark-dedicated.service&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="タイマーユニットを作る">タイマーユニットを作る&lt;/h4>
&lt;p>今回は誰も遊んでいないであろう毎週水曜日正午に再起動処理を実行することにします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-restart-ark-dedicated.timer" data-lang="restart-ark-dedicated.timer">&lt;span style="color:#66d9ef">[Unit]&lt;/span>
&lt;span style="color:#a6e22e">Description&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">Restart ark-dedicated.service every wednesday&lt;/span>
&lt;span style="color:#66d9ef">[Timer]&lt;/span>
&lt;span style="color:#a6e22e">OnCalendar&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">Wed 12:00&lt;/span>
&lt;span style="color:#a6e22e">Persistent&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">True&lt;/span>
&lt;span style="color:#66d9ef">[Install]&lt;/span>
&lt;span style="color:#a6e22e">WantedBy&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">timers.target&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="webhookで通知する">webhookで通知する&lt;/h3>
&lt;p>いちいち再起動するよーとかしたよーとか言うのもめんどうなので。&lt;/p>
&lt;h4 id="まずは試してみる">まずは試してみる&lt;/h4>
&lt;p>&lt;code>通知をしたいDiscordサーバのサーバ設定→ウェブフック&lt;/code>からウェブフックを作り、webhook URLを取得します。&lt;/p>
&lt;p>とりあえず下記コマンドで雑にメッセージを投げてみる。&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X POST -H 'Content-Type: application/json' -d '{&amp;quot;content&amp;quot; : &amp;quot;test&amp;quot;}' webhookのurl
&lt;/code>&lt;/pre>&lt;h4 id="再起動の開始と終了に合わせて通知を飛ばす">再起動の開始と終了に合わせて通知を飛ばす&lt;/h4>
&lt;p>&lt;code>restart-ark-dedicated.service&lt;/code>を再び編集し、&lt;code>ExecStartPre&lt;/code>で&lt;code>ExecStart&lt;/code>の実行前に、&lt;code>ExecStartPost&lt;/code>で&lt;code>ExecStart&lt;/code>の実行後に走らせるコマンドをそれぞれ指定します。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-restart-ark-dedicated.service(編集後)" data-lang="restart-ark-dedicated.service(編集後)">[Unit]
Description=Restart ark-dedicated.service
[Service]
Type=oneshot
ExecStartPre=/usr/bin/curl -X POST -H 'Content-Type: application/json' -d '{&amp;quot;content&amp;quot; : &amp;quot;[定期]サーバ再起動開始&amp;quot;}' webhookのurl
ExecStart=/bin/systemctl try-restart ark-dedicated.service
ExecStartPost=/usr/bin/curl -X POST -H 'Content-Type: application/json' -d '{&amp;quot;content&amp;quot; : &amp;quot;[定期]サーバ再起動完了&amp;quot;}' webhookのurl
&lt;/code>&lt;/pre>&lt;h3 id="おわりに">おわりに&lt;/h3>
&lt;p>このままだと再起動開始通知から速攻で再起動処理が動くのであんまりよくない。
人に優しくありたいなら30分とか1時間前に通知するようにしましょう。&lt;/p>
&lt;h3 id="参考">参考&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://wiki.archlinux.jp/index.php/Systemd">systemd - ArchWiki&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.jp/index.php/Systemd/%E3%82%BF%E3%82%A4%E3%83%9E%E3%83%BC">systemd/タイマー - ArchWiki&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://discord.com/developers/docs/resources/webhook#execute-webhook-jsonform-params">Discord Developer Portal — Documentation — Webhook&lt;/a>&lt;/li>
&lt;/ul></content></item></channel></rss>