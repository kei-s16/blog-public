<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>blog</title><link>/</link><description>Recent content on blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 02 Sep 2022 00:00:00 +0900</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Cloudformationの小技</title><link>/posts/cloudformation-tips/</link><pubDate>Fri, 02 Sep 2022 00:00:00 +0900</pubDate><guid>/posts/cloudformation-tips/</guid><description>最近Cloudformationを書く機会が増えてterraformではなにも考えなくてもよかったのにCloudformationだとものによってはDependsOnを使って依存関係を明示的に指定してあげる必要があったりだとか、おなじCloudformationでもSAMだと方言がつらかったりだとかする現実と戦わなければいけないハメにあっていて、それに伴い小技みたいなものを人に話す機会も増えたので</description><content>&lt;p>最近Cloudformationを書く機会が増えて&lt;del>terraformではなにも考えなくてもよかったのにCloudformationだとものによってはDependsOnを使って依存関係を明示的に指定してあげる必要があったりだとか、おなじCloudformationでもSAMだと方言がつらかったりだとかする現実と戦わなければいけないハメにあって&lt;/del>いて、それに伴い小技みたいなものを人に話す機会も増えたので、メモしておく。&lt;br>
Cloudformationをちゃんと触り始めて2週間くらいなので、もっといい方法あるよとか間違ってるよとかあったら教えてください。Twitterとかで。&lt;/p>
&lt;h2 id="parameterを選択式にしたい">Parameterを選択式にしたい&lt;/h2>
&lt;p>AllowedValuesを指定してあげることで、マネジメントコンソールのParameter欄を入力式から選択式にできる&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">Parameters&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Stage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Type&lt;/span>: &lt;span style="color:#ae81ff">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">AllowedValues&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">production&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">develop&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="parameterの入力を見て使う値をいい感じに変更したい">Parameterの入力を見て、使う値をいい感じに変更したい&lt;/h2>
&lt;p>たとえば、既存のネットワークリソースの中に作成するコンピューティングリソースを定義するCloudformationを書くとする。同じCloudformationで複数のステージにデプロイできるようにもしたい。&lt;br>
このとき、コンピューティングリソースを作成するVPC IDや関連づけるサブネットのIDを素直にParameterで入力させるもありだが、対象が少ないうちはまだしもテンプレートが膨れ上がって入力すべき値が増えてくると入力が大変。そこで、MappingsとFindInMapを使って、Parameterの値を元に事前に決めた値を参照するように書いてあげる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">Parameters&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Stage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Type&lt;/span>: &lt;span style="color:#ae81ff">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">AllowedValues&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">production&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">develop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">Mappings&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">StageMap&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">production&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vpcId&lt;/span>: &lt;span style="color:#ae81ff">vpc-hogehoge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">publicSubnets&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;subnet-hoge&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;subnet-fuga&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">develop&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vpcId&lt;/span>: &lt;span style="color:#ae81ff">vpc-piyopiyo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">publicSubnets&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;subnet-foo&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;subnet-bar&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">Resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ExampleResource&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Type&lt;/span>: &lt;span style="color:#ae81ff">AWS::Example::ResourceType&lt;/span> &lt;span style="color:#75715e"># 実際にこんなリソースはないのでコピッペではうごかない&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Properties&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Vpc&lt;/span>: !&lt;span style="color:#ae81ff">FindInMap [StageMap, !Ref Stage, vpcId]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Subnets&lt;/span>: !&lt;span style="color:#ae81ff">FindInMap [StageMap, !Ref Stage, publicSubnets]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="parameterの入力を見てリソースを作成するかどうかいい感じに決めてほしい">Parameterの入力を見て、リソースを作成するかどうかいい感じに決めてほしい&lt;/h2>
&lt;p>前述のケースでは環境ごとにリソースの設定値を切り替えられたが、そもそもリソースがいらない場合もある。&lt;br>
たとえば、本番はサーバ2台いるけど開発はべつに1台でもいいよねとか。&lt;br>
そんなときはConditionsを使う。&lt;a href="https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html">Resourcesの中にConditionを指定してあげると、Trueな場合のみリソースが作成される&lt;/a>ので、この仕組みをうまいこと使ってあげる。&lt;/p>
&lt;h3 id="parameterで都度受けつけるパターン">Parameterで都度受けつけるパターン&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">Parameters&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Stage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Type&lt;/span>: &lt;span style="color:#ae81ff">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">AllowedValues&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">production&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">develop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">RequireStandbyInstance&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Type&lt;/span>: &lt;span style="color:#ae81ff">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">AllowedValues&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">Conditions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">isRequireStandbyInstance&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> !&lt;span style="color:#ae81ff">Equals [true, !Ref RequireStandbyInstance]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">Resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">StandbyInstance&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Condition&lt;/span>: &lt;span style="color:#ae81ff">isRequireStandbyInstance&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stageごとに決め打ちするパターン">Stageごとに決め打ちするパターン&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">Parameters&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Stage&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Type&lt;/span>: &lt;span style="color:#ae81ff">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">AllowedValues&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">production&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">develop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">Mappings&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">StageMap&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">production&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requireStandbyInstance&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">develop&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requireStandbyInstance&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">Conditions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">isRequireStandbyInstance&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> !&lt;span style="color:#ae81ff">Equals [true, !FindInMap [StageMap, !Ref Stage, requireStandbyInstance]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">Resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">StandbyInstance&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">Condition&lt;/span>: &lt;span style="color:#ae81ff">isRequireStandbyInstance&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>GCP Compute Engineの永久無料枠でarchlinuxを起動する</title><link>/posts/setup-archlinux-on-compute-engine-free-tier/</link><pubDate>Thu, 11 Aug 2022 16:00:00 +0900</pubDate><guid>/posts/setup-archlinux-on-compute-engine-free-tier/</guid><description>前置き tailscale + 自宅サーバ群でそれなりに快適なサーバ生活を送っていた私ですが、「やはりクラウドにも1台くらい持っておくべきだよな、社会人として」、という思いつきにより、適当にサーバを立てることにしました。 条件は以下です。単純ですね。 archlinuxが動くこと なるべく安いこと スペックはneovimが快適に動けばヨシ AWSでないこと(AWSが嫌いというわけではなく、普段使っていないものにしたい) リージョン</description><content>&lt;h2 id="前置き">前置き&lt;/h2>
&lt;p>tailscale + 自宅サーバ群でそれなりに快適なサーバ生活を送っていた私ですが、「やはりクラウドにも1台くらい持っておくべきだよな、社会人として」、という思いつきにより、適当にサーバを立てることにしました。&lt;/p>
&lt;p>条件は以下です。単純ですね。&lt;/p>
&lt;ul>
&lt;li>archlinuxが動くこと&lt;/li>
&lt;li>なるべく安いこと&lt;/li>
&lt;li>スペックはneovimが快適に動けばヨシ&lt;/li>
&lt;li>AWSでないこと(AWSが嫌いというわけではなく、普段使っていないものにしたい)&lt;/li>
&lt;li>リージョンはUS, JP, TWくらいならどこでもいい(EUは遠すぎる)&lt;/li>
&lt;/ul>
&lt;p>ハードルとしてはほとんど地面すれすれぐらいの低さです。&lt;br>
この条件で海外VPSサービスなども考慮に入れると選択肢は無限大なのですが、ここは&lt;del>たまたまTwitterでみかけた記事をそのまま参考にします&lt;/del>メディアの力を頼ることにします。&lt;br>
&lt;a href="https://www.publickey1.jp/blog/22/free_tier2022.html">期限の制約なく無料で使えるクラウド「Free Tier」主要サービスまとめ。2022年版&lt;/a>&lt;/p>
&lt;p>lifetime-freeで仮想マシンを与えてくれるサービスが2つもいたので、&lt;strong>なるべく安い&lt;/strong> を飛び越して無料にすることができそうです。&lt;br>
軽く調べたところ、GCPのCompute Engineには、archlinuxのイメージを使えるらしいので、記事タイトルでお察しではありますが、即決でこちらにしました。&lt;br>
(ちなみに、スペックはOCIもGCPも無料にしてはいい感じでした。OCIはいろいろもうちょっと頑張って覇権取りに行く姿勢を見せてほしい……)&lt;/p>
&lt;h2 id="やっていき">やっていき&lt;/h2>
&lt;h3 id="前準備">前準備&lt;/h3>
&lt;h4 id="gcpのアカウントを作る">GCPのアカウントを作る&lt;/h4>
&lt;p>&lt;a href="https://cloud.google.com/gcp/?hl=ja">こちら&lt;/a>からどうぞ。
初回だと4万円ぶんくらいのクレジットも貰えるので、設定ミスって請求がばくはつしてもある程度はあんしんです。&lt;br>
アカウントの作成と同時に、ワークスペースが作成されます。概念的にはAWSのアカウントに相当するっぽい。この中に、VPCやCE, GKEなどのリソースが作成されていくようです。&lt;/p>
&lt;h4 id="ローカルにsdkを導入する">ローカルにSDKを導入する&lt;/h4>
&lt;p>作業環境はarchlinuxです。
それ以外の環境を使っている人がもしいれば、&lt;a href="https://cloud.google.com/sdk/">公式のドキュメント&lt;/a>を参考に導入してください。&lt;/p>
&lt;p>archlinuxの場合、AURから&lt;a href="https://aur.archlinux.org/packages/google-cloud-sdk">google-cloud-sdk&lt;/a>をインストールすることができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% yay -S google-cloud-sdk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このあと &lt;code>gcloud&lt;/code> コマンドを叩いてみると、ほかに依存パッケージがいたようで、エラーを吐かれたのでそれもインストールします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% sudo pacman -S libxcrypt-compat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="gcloudコマンドにgcpの認証を通す">gcloudコマンドにGCPの認証を通す&lt;/h4>
&lt;p>&lt;code>aws configure&lt;/code> みたいなやつです。&lt;br>
ブラウザを勝手に立ち上げて、いつものGoogle認証を許可すればOKで、事前にIAMユーザ作っておいてACCESS_KEY, SECRET_KEYをコピペして……みたいなことは不要でした。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% gcloud init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># いろいろ出るが省略&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># GCPの認証を通す&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>You must log in to &lt;span style="color:#66d9ef">continue&lt;/span>. Would you like to log in &lt;span style="color:#f92672">(&lt;/span>Y/n&lt;span style="color:#f92672">)&lt;/span>? &lt;span style="color:#75715e"># Enterを叩くとブラウザが開くので、Googleアカウントの認証を通す&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>You are logged in as: &lt;span style="color:#f92672">[&lt;/span>your.mail.address@example.com&lt;span style="color:#f92672">]&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># プロジェクトを選ぶ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Pick cloud project to use:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> hoge-project &lt;span style="color:#75715e"># デフォルトで作られているプロジェクト名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>2&lt;span style="color:#f92672">]&lt;/span> Enter a project ID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>3&lt;span style="color:#f92672">]&lt;/span> Create a new project
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Please enter numeric choice or text value &lt;span style="color:#f92672">(&lt;/span>must exactly match list item&lt;span style="color:#f92672">)&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Your current project has been set to: &lt;span style="color:#f92672">[&lt;/span>hoge-project&lt;span style="color:#f92672">]&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># デフォルトリージョンを選択する&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Do you want to configure a default Compute Region and Zone? &lt;span style="color:#f92672">(&lt;/span>Y/n&lt;span style="color:#f92672">)&lt;/span>?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Which Google Compute Engine zone would you like to use as project default?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>If you &lt;span style="color:#66d9ef">do&lt;/span> not specify a zone via a command line flag &lt;span style="color:#66d9ef">while&lt;/span> working with Compute Engine resources, the default is assumed.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># リストが出るが長いので省略&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Too many options &lt;span style="color:#f92672">[&lt;/span>104&lt;span style="color:#f92672">]&lt;/span>. Enter &lt;span style="color:#e6db74">&amp;#34;list&amp;#34;&lt;/span> at prompt to print choices fully.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Please enter numeric choice or text value &lt;span style="color:#f92672">(&lt;/span>must exactly match list item&lt;span style="color:#f92672">)&lt;/span>: &lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#75715e"># 無料枠を使いたいのでオレゴンを選択&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Your project default Compute Engine zone has been set to &lt;span style="color:#f92672">[&lt;/span>us-west1-b&lt;span style="color:#f92672">]&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>You can change it by running &lt;span style="color:#f92672">[&lt;/span>gcloud config set compute/zone NAME&lt;span style="color:#f92672">]&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Your project default Compute Engine region has been set to &lt;span style="color:#f92672">[&lt;/span>us-west1&lt;span style="color:#f92672">]&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>You can change it by running &lt;span style="color:#f92672">[&lt;/span>gcloud config set compute/region NAME&lt;span style="color:#f92672">]&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># このあともいろいろ出るが、ここに設定あるからね系のアナウンスなので省略&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="archlinuxのインスタンスを起動する">archlinuxのインスタンスを起動する&lt;/h3>
&lt;p>イメージはGCP側で用意されているようです。&lt;br>
&lt;a href="https://github.com/GoogleCloudPlatform/compute-archlinux-image-builder">GoogleCloudPlatform/compute-archlinux-image-builder&lt;/a>のREADMEに従って、インスタンスを作成・起動します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>gcloud compute instances create arch-1 &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#75715e"># インスタンス・ストレージ名になる&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --image-project&lt;span style="color:#f92672">=&lt;/span>arch-linux-gce &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --image-family&lt;span style="color:#f92672">=&lt;/span>arch &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --machine-type&lt;span style="color:#f92672">=&lt;/span>e2-micro &lt;span style="color:#ae81ff">\ &lt;/span>&lt;span style="color:#75715e"># 永久無料枠のサイズにする&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --boot-disk-size&lt;span style="color:#f92672">=&lt;/span>30GB &lt;span style="color:#75715e"># 30GBまでストレージ無料なので、せっかくだしデフォルトより大きくしておく&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># warnが出るけど、気にしない&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME ZONE MACHINE_TYPE PREEMPTIBLE INTERNAL_IP EXTERNAL_IP STATUS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arch-1 us-west1-b e2-micro &lt;span style="color:#f92672">{&lt;/span>INTERNAL_IP&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">{&lt;/span>EXTERNAL_IP&lt;span style="color:#f92672">}&lt;/span> RUNNING
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これでインスタンスが作成・起動されます。
&lt;img src="/images/setup-archlinux-on-compute-engine-free-tier/compute-engine.png" alt="Webコンソールのスクリーンショット">&lt;/p>
&lt;p>ブラウザからSSHボタンを押すと、別窓でインスタンスに対するSSHが起動します。&lt;br>
また、&lt;code>gcloud compute ssh ${インスタンス名}&lt;/code> で、&lt;code>vagrant ssh&lt;/code> のような感覚で、ターミナルから接続することもできます。&lt;br>
接続時にはブラウザ経由の場合はGCPに登録してあるメールアドレスのユーザ名部分、&lt;code>gcloud&lt;/code> 経由の場合には接続元のマシンのユーザ名で新規ユーザが作成されます。&lt;/p>
&lt;h3 id="起動後">起動後&lt;/h3>
&lt;p>とりあえずパッケージの更新をしておきましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% sudo pacman -S archlinux-keyring
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% sudo pacman -Syyu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これでおわりです。&lt;br>
あとはお好きにどうぞ。&lt;/p>
&lt;h3 id="そのほかやっておくこと">そのほかやっておくこと&lt;/h3>
&lt;h4 id="pingに応答しないようにしておく">pingに応答しないようにしておく&lt;/h4>
&lt;p>なぜかインターネットからのpingに応答するのがデフォルトになっているので、 &lt;code>default-allow-icmp&lt;/code> を削除する。&lt;br>
設定は別画面にあるので、スクショのようにして探す。&lt;br>
&lt;img src="/images/setup-archlinux-on-compute-engine-free-tier/firewall.png" alt="ファイアウォール設定画面までののスクリーンショット">&lt;/p>
&lt;h4 id="sshのポート番号を変えておく">sshのポート番号を変えておく&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% sudo pacman -S vim
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% export EDITOR&lt;span style="color:#f92672">=&lt;/span>vim
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% sudoedit /etc/ssh/sshd_config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># `# Port 22` の行を探し、`Port {任意の番号}` に変えておく&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% sudo systemctl restart sshd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上記が終わったら、GCPのファイアウォール設定から、 &lt;code>default-allow-ssh&lt;/code> のルールを探し、ポート番号を変更する。&lt;/p>
&lt;h4 id="普通にsshできるようにする">普通にsshできるようにする&lt;/h4>
&lt;p>&lt;code>gcloud compute ssh&lt;/code> でもいいんだけど、ポート番号変えたりするとつらいところがあるので、普通にsshできるように設定をエクスポートする。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>% gcloud compute config-ssh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを実行すると、&lt;code>~/.ssh/config&lt;/code> に設定が追記されるので、適宜ユーザ名やポート番号を追記・編集する。&lt;/p>
&lt;h4 id="予算アラートを設定する">予算アラートを設定する&lt;/h4>
&lt;p>Webコンソールからの導線がわかりにくいので、画面上部の検索メニューに &lt;code>予算とアラート&lt;/code> と入力して設定ページに飛ぶ。&lt;br>
とりあえず1円で設定しておけばよさげ。クーポンや無料枠ぶんを反映する設定にしておかないと、割引前の請求額でアラートを飛ばすようなので、そこだけ注意。&lt;/p>
&lt;h2 id="感想">感想&lt;/h2>
&lt;p>わりとさっくりいけたので特に書くことがない……。&lt;br>
とりあえず立てたインスタンスにはこれからSELinuxをいれたりなんだりして、便利に使っていこうと思います。&lt;/p>
&lt;p>あと今回ほとんど初めてGCPを触ったけど、AWSとはやっぱり文化が違う感じがしていて、AWS, Azure, OCIに連なるサービスというより、どちらかというと強いherokuみたいな印象を受けた。&lt;br>
コンソールが使いにくい・デフォルト設定がわりと不思議、みたいなところはあるけど、極端なつらみはない(Windows版firefoxで表示が崩れまくるので、別のところでつらみはあったけど)ので、個人利用程度だったら人に勧めるかも。&lt;/p>
&lt;p>そんな感じです。&lt;/p></content></item><item><title>ISUCON初参加のふりかえり</title><link>/posts/isu12q-report/</link><pubDate>Tue, 26 Jul 2022 22:00:00 +0900</pubDate><guid>/posts/isu12q-report/</guid><description>ISUCONというパフォーマンスチューニングの大会、あるいはイベントがあります。 過去に社内イベントで競技者として1回、運営として1回参加し、なかなかおもしろかったのでいつか本家にも出てみたいなと思っていたところ、会社の後輩が参加登録に成功し、チームに誘ってもらえたのでISUCON12の予選に初めて参加しました。 そして当然のごとく予選落ちしました。 朝食の肖像 pic.twitter.com/2Ks8PbZJei &amp;mdash; kei (@_kei_s) July 23, 2022 (起床に成功したので調子に乗</description><content>&lt;p>ISUCONというパフォーマンスチューニングの大会、あるいはイベントがあります。&lt;br>
過去に社内イベントで競技者として1回、運営として1回参加し、なかなかおもしろかったのでいつか本家にも出てみたいなと思っていたところ、会社の後輩が参加登録に成功し、チームに誘ってもらえたので&lt;a href="https://isucon.net/archives/56571716.html">ISUCON12&lt;/a>の予選に初めて参加しました。&lt;br>
そして当然のごとく予選落ちしました。&lt;/p>
&lt;p>&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">朝食の肖像 &lt;a href="https://t.co/2Ks8PbZJei">pic.twitter.com/2Ks8PbZJei&lt;/a>&lt;/p>&amp;mdash; kei (@_kei_s) &lt;a href="https://twitter.com/_kei_s/status/1550632062256033792?ref_src=twsrc%5Etfw">July 23, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
(起床に成功したので調子に乗っていた人間の肖像)&lt;/p>
&lt;p>チーム全体としてのふりかえりは別のメンバーがしてくれると思うので、この記事では個人的なふりかえりをしようと思います。&lt;/p>
&lt;h2 id="やったこと">やったこと&lt;/h2>
&lt;h3 id="前日まで">前日まで&lt;/h3>
&lt;ul>
&lt;li>当日のスケジュールをおおまかに引いた&lt;/li>
&lt;li>メンバーの使える言語がばらばらだったので、まずは読むだけなら負荷の低いPythonでいこうと決めた&lt;/li>
&lt;li>さくらのクラウドに練習環境を作成して、夜間はチームが遊べるようにした&lt;/li>
&lt;li>下記の理由で、ローカル開発環境は用意しない判断をした
&lt;ul>
&lt;li>社内ISUCONにおいて、あると便利だけど事前準備のあてが外れるとキツいと思った&lt;/li>
&lt;li>結局サーバ内であーだこーだ言いながら作業している時間の方が長かった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GitHubのプライベートリポジトリを切って、そこに見るべきポイントをissueとして用意した
&lt;ul>
&lt;li>当日はまずissueを全部消化するところからスタートしていく想定&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>メンバーの役割をある程度決めた(速攻で崩れた)
&lt;ul>
&lt;li>代表 本業インフラ : アプリとDB&lt;/li>
&lt;li>メンバー 本業アプリ : DBとインフラ&lt;/li>
&lt;li>私 本業不明 : その他雑用とインフラ・アプリ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="当日朝">当日朝&lt;/h3>
&lt;ul>
&lt;li>7時に起きた&lt;/li>
&lt;li>スポンサーや事前に配られたCFnから考えて当日環境はアプリ + MySQLがEC2に乗ってる素直な構成だろうなというヤマ張りをした
&lt;ul>
&lt;li>じつは全部k8sですとかDBはMongoDBですとかならなきゃ手も足も出ないことはないだろうという話をして緊張をほぐした
&lt;ul>
&lt;li>フラグだった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>モンスターを飲んだ&lt;/li>
&lt;li>ISUCON公式配信を見た
&lt;ul>
&lt;li>マルチテナントの7文字でつらくなった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/75YnJ_3289g" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h3 id="競技中">競技中&lt;/h3>
&lt;p>だいたいこんなスケジュールを想定した&lt;/p>
&lt;pre tabindex="0">&lt;code>- ～ 11:00 マニュアル確認
- ～ 12:00 初期状態での計測
- 計測ツール入れる
- New Relic導入
- スロークエリログ有効化
- alpなど入れる
- ベンチマークひたすらまわす
- ベンチマーク結果からアタリをつける
- ～ 12:30 午後から触る場所を決める
- ～ 13:30 休憩
- ～ 終了1時間前 KAIZEN
- ～ 終了 作業止める
&lt;/code>&lt;/pre>&lt;p>私がやったことは&lt;/p>
&lt;ul>
&lt;li>全員に &lt;code>~/.ssh/config&lt;/code> 配った&lt;/li>
&lt;li>全サーバの
&lt;ul>
&lt;li>&lt;code>/etc/hosts&lt;/code> 書き換え&lt;/li>
&lt;li>参考実装切り替え&lt;/li>
&lt;li>&lt;code>.vimrc&lt;/code> 配置&lt;/li>
&lt;li>&lt;code>.bashrc&lt;/code> に &lt;code>export EDITOR=vim&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>初期化処理を雰囲気把握した()&lt;/li>
&lt;li>NewRelicを見た&lt;/li>
&lt;li>nginxのログから重い処理を探った
&lt;ul>
&lt;li>&lt;code>reqtime&lt;/code> を使ってログを出し、ベンチを流して吐かれたログをシェル芸でいい感じにソートして、重い処理のリストを作った&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>他の人が書いたnginx.confをレビューした&lt;/li>
&lt;li>PythonからPyPyに切り替えようとした&lt;/li>
&lt;li>SQLiteがいることに気付いてしまった
&lt;ul>
&lt;li>SQLiteを雰囲気知っていたので、軽く概要と、こいつがいるとスケールさせるのが難しいことをメンバーに伝えた&lt;/li>
&lt;li>SQLiteのVSCode拡張を探してメンバーに教えた
&lt;ul>
&lt;li>自分はvimプラギンを探すのがめんどうだったのでやらなかった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SQLiteをMySQLにするのはむりだと判断した&lt;/li>
&lt;li>SQLiteのディレクトリをNFSとかで共有すればいい感じにいけるのではと思った
&lt;ul>
&lt;li>気付いたのが遅かったのでできなかった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>誰かがアプリやDBを壊すたびに直した&lt;/li>
&lt;li>戯れにPythonからGoに実装を戻したら点数が上がることに気付いてしまった
&lt;ul>
&lt;li>Goをちゃんと書ける人がいなかったので、なにもかもダメだったら戻そうと言った&lt;/li>
&lt;li>ダメだったので戻してクエリだけ書き換える決断をした(点数が上がった)&lt;/li>
&lt;li>なんだかんだでがんばってGo書こうとした
&lt;ul>
&lt;li>一部処理を書き換えたが効果がなかったので差し戻した&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="わかったこと">わかったこと&lt;/h2>
&lt;ul>
&lt;li>もっと調査に時間をかけてもいい。全体的なスコアグラフも午後から急に伸び始めた記憶がある。
&lt;ul>
&lt;li>ただし、調査をするための準備を事前にしておく必要がある
&lt;ul>
&lt;li>調査用にnginx.confをある程度用意しておくとか&lt;/li>
&lt;li>監視ツールをさくっと導入できるようにしておくとか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>issueベースでやることを切っておくと当日やり忘れが少ない&lt;/li>
&lt;li>予想外が出てくると人は思考が鈍る
&lt;ul>
&lt;li>SQLiteの衝撃&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>自動デプロイとローカル開発環境はやはり必要&lt;/li>
&lt;li>Goははやい&lt;/li>
&lt;li>感想戦を眺めたり、他の人の記事を読んだ感じ、目のつけどころは悪くなかったけど実現できなかったところが多かった
&lt;ul>
&lt;li>&lt;a href="https://dic.nicovideo.jp/a/%E3%83%8E%E3%83%BC%E3%83%BB%E3%82%AB%E3%83%A9%E3%83%86%E3%80%81%E3%83%8E%E3%83%BC%E3%83%BB%E3%83%8B%E3%83%B3%E3%82%B8%E3%83%A3">カラテが不足している&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">発想はよかったけどカラテが足りず、SQL理解マンの力にすべて頼った形 やはりノーカラテノーニンジャ……&lt;/p>&amp;mdash; kei (@_kei_s) &lt;a href="https://twitter.com/_kei_s/status/1550776364957319168?ref_src=twsrc%5Etfw">July 23, 2022&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="つぎやること">つぎやること&lt;/h2>
&lt;ol>
&lt;li>監視・計測周りのツールキットを用意しておく&lt;/li>
&lt;li>使用言語のコンテナ環境、あるいはある程度整備されたVagrantを用意しておく(チーム内共通の作業環境をすぐ立ち上げられるようにする)&lt;/li>
&lt;li>VPSへのデプロイフローを用意しておく&lt;/li>
&lt;li>nginxやmysqlなどの鉄板設定を用意しておく&lt;/li>
&lt;/ol>
&lt;p>この4点は手軽さに対して効果が大きいのでは、と思っています(というか今回意図的にやらなかったのでやっぱ必要だよねこれとなっている)。
というか、インフラ・ミドルウェアまでは事前準備で済ませて、当日はアプリに集中するのがよさそう。&lt;/p>
&lt;p>あとは個人的に、ここ数ヶ月ずっとシェルスクリプトみたいなものとかYAMLやHCLばかり書いていたのもあってアプリが前ほど書けなくなっていたのに気付かされたので、アプリに対してのやっていきの精神が高まってます。&lt;/p>
&lt;h2 id="総括">総括&lt;/h2>
&lt;p>来年も(参加競争に勝てたら)がんばるぞ。&lt;/p></content></item><item><title>Dockerfileを書いてみよう</title><link>/posts/how-to-write-a-dockerfile/</link><pubDate>Mon, 28 Mar 2022 02:30:00 +0900</pubDate><guid>/posts/how-to-write-a-dockerfile/</guid><description>はじめに Dockerfileを使ったイメージの作成と起動について人に教える機会も増えてきたこともあり、毎回アドリブでやるのもつらいし日によって質のブレも出てくるので、ここらでいったん文書化することにしました。 想定読者はDockerなんもわからんのでやってみながら覚えたい、ふだんはアプリを書くのがメインな人です。 基本的なshellでの操作(cd, mv, cpなど)はできるものとし、また、Dockerはイン</description><content>&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>Dockerfileを使ったイメージの作成と起動について人に教える機会も増えてきたこともあり、毎回アドリブでやるのもつらいし日によって質のブレも出てくるので、ここらでいったん文書化することにしました。&lt;br>
想定読者はDockerなんもわからんのでやってみながら覚えたい、ふだんはアプリを書くのがメインな人です。&lt;br>
基本的なshellでの操作(cd, mv, cpなど)はできるものとし、また、&lt;code>Docker&lt;/code>はインストール済みのものとします。&lt;code>compose v2&lt;/code>および&lt;code>docker-compose&lt;/code>には触れません。&lt;br>
最終的に簡単な(&lt;strong>ここ重要&lt;/strong>)スクリプト言語の実行環境を作るためのDockerfileを書くことができるようになることが目的です。
題材にはPythonを使います。楽なので。&lt;br>
また、この記事で実行するコマンドはlinux上で実行されています。実行環境によって出力が異なることがありますが、その場合は適宜読み替えをお願いします。&lt;/p>
&lt;h2 id="目次">目次&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="#docker%E3%81%A8%E3%81%AF">Dockerとは？&lt;/a>&lt;/li>
&lt;li>&lt;a href="#dockerfile%E3%82%92%E6%9B%B8%E3%81%84%E3%81%A6%E3%81%84%E3%81%8F">Dockerfileを書いていく&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#2%E8%A1%8C%E3%81%A7%E5%85%A5%E9%96%80%E3%81%99%E3%82%8B">2行で入門する&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%87%AA%E5%88%86%E7%94%A8%E3%81%AB%E3%82%BF%E3%82%B0%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B">自分用にタグを設定する&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E3%82%BD%E3%83%BC%E3%82%B9%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AB%E5%90%8C%E6%A2%B1%E3%81%97%E3%81%A6%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8B%E3%82%89%E5%AE%9F%E8%A1%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B">ソースファイルをコンテナに同梱して、ファイルから実行できるようにする&lt;/a>&lt;/li>
&lt;li>&lt;a href="#arg%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86">ARGを使ってみよう&lt;/a>&lt;/li>
&lt;li>&lt;a href="#pip%E3%82%92%E4%BD%BF%E3%81%86">pipを使う&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB">終わりに&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="dockerとは">Dockerとは？&lt;/h2>
&lt;p>そもそもDockerとは？ についてです。&lt;br>
&lt;a href="https://docs.docker.com/get-started/overview/">公式&lt;/a>ドキュメントからわかりやすい部分を引用します(引用は&lt;a href="https://docs.docker.jp/get-started/overview.html">有志日本語訳&lt;/a>)。&lt;/p>
&lt;blockquote>
&lt;p>Docker はアプリケーションの開発、導入、実行を行うためのオープンなプラットフォームです。Docker を使えば、アプリケーションをインフラストラクチャーから切り離すことができるため、ソフトウエアをすばやく提供することができます。Docker であれば、アプリケーションを管理する手法をそのまま、インフラストラクチャーの管理にも適用できます。&lt;/p>
&lt;/blockquote>
&lt;p>これは、より簡単に、こう言い換えることができます。&lt;br>
&lt;em>Dockerは、任意の必要なソフトウェアだけでアプリケーションの実行を可能&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>にし、開発・運用を簡単にすることが&lt;strong>できる&lt;/strong>ものです&lt;/em>。&lt;/p>
&lt;p>&lt;code>任意の必要なソフトウェアだけでアプリケーションの実行を可能にする&lt;/code>とはどういうことでしょうか。&lt;br>
一般的に、アプリケーションの実行環境は複数のソフトウェアの集合です。たとえば、「Hello World!」とだけ書かれたwebページを返すだけのPythonで書かれたアプリのことを考えてみてください。これを、Dockerではない通常のLinux環境で実行する場合、どれくらいのソフトウェアが必要になるでしょうか。&lt;br>
私もすべてを挙げることはできませんが、すぐに思いつく範囲では下記のようなものがあります。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Python&lt;/code>(当然ですね)&lt;/li>
&lt;li>&lt;code>sshd&lt;/code> or &lt;code>ftp&lt;/code>(コードをデプロイするのに必要です)&lt;/li>
&lt;li>なにかしらのネットワークマネージャ&lt;/li>
&lt;li>上記のソフトウェアをインストールするためのパッケージマネージャ(&lt;code>apt&lt;/code>や&lt;code>pacman&lt;/code>)&lt;/li>
&lt;li>上記のソフトウェアを実行するためのプロセス管理システム(&lt;code>init.d&lt;/code>や&lt;code>systemd&lt;/code>)&lt;/li>
&lt;li>linux kernel&lt;/li>
&lt;/ul>
&lt;p>上記のソフトウェア群はそれぞれが動作のために別のソフトウェアを要求します。アプリケーションを運用するということは、大量のソフトウェアを運用することです。&lt;br>
どこまで厳密にやるかはともかく、パフォーマンスのため、セキュリティレベル維持のため、アプリケーションのソースコードに加えて、これらのうちある程度の管理が必要ということです。具体的には&lt;code>Ansible&lt;/code>や&lt;code>Chef&lt;/code>などの構成管理ツールや&lt;code>cloud-init&lt;/code>などを利用してサーバの状態を一定にしたり、カーネルのバージョンアップをしたり&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>です。&lt;br>
このレイヤーの出来事はアプリケーションの健全な実行に必要ですが、開発者としては若干別領域、たとえばインフラエンジニアやSREの領域に見えるため、本格的にやるにはちょっと躊躇する部分かもしれません。&lt;br>
ところが、この部分を開発者以外に任せることにすると、別の複数の問題が発生します。たとえば、ミドルウェアレベルの構成変更にチーム外の人間とのやりとりが必要になったり、アプリケーション実行環境の全体像がアプリケーション開発者にぼんやりとしか見えなくなったりです。これらは最終的に開発速度の低下を引き起こします。&lt;/p>
&lt;p>そこで、Dockerの出番というわけです。&lt;br>
Docker&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>を利用することで、深いlinuxサーバの知識がなくとも、実行環境を簡単な定義ファイル&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>だけで整えることができるようになります。&lt;/p>
&lt;p>とだけ書くと、まるで夢のような技術に聞こえてしまうのですが、ここで先ほどのテキストの太字部分を思い出してください。&lt;/p>
&lt;blockquote>
&lt;p>開発・運用を簡単にすることが&lt;strong>できる&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>できる&lt;/strong>とあります。&lt;strong>簡単になる&lt;/strong>ではないことに留意してください。&lt;br>
DockerにはDockerの作法があり、作法を逸脱するとわりとつらい思いをします。コンテナの概念に慣れていないと、この作法の逸脱をしてしまいがちです。Dockerの不便さを解消しようとするまえに、あなたが不便に思うこと、そして解消したいことがコンテナの考え方に反していないかを考えてみてください。少しオーウェル的ですが、その不便さこそがコンテナの利便性を提供しているものかもしれません&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>それでは、やっていきましょう&lt;/p>
&lt;h2 id="dockerfileを書いていく">Dockerfileを書いていく&lt;/h2>
&lt;p>扱うファイルが多いので、あらかじめできあがったものを公開しています。必要に応じて参照したり、cloneしてご利用ください。&lt;br>
&lt;a href="https://github.com/kei-s16/blog-docker-examples">kei-s16/blog-docker-examples&lt;/a>&lt;/p>
&lt;h3 id="2行で入門する">2行で入門する&lt;/h3>
&lt;p>このセクションのサンプルは&lt;a href="https://github.com/kei-s16/blog-docker-examples/tree/main/example1">example1&lt;/a>にあります。&lt;/p>
&lt;p>Dockerコンテナを起動するためにはコンテナイメージと呼ばれるものが必要で、コンテナイメージを作るためにはDockerfileという定義ファイルを書いてあげる必要があります。このセクションでは、この一連の流れを体験しましょう。&lt;/p>
&lt;p>まずはDockerfileを書いて、コンテナイメージをビルドし、コンテナを立ち上げるためだけの小さなPythonコードを考えます。&lt;br>
最初から大きくやるとたいてい失敗するので、極端なほど小さく始めましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>はい、Hello Worldです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python -c &lt;span style="color:#e6db74">&amp;#39;print(&amp;#34;Hello World!&amp;#34;)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% python -c &lt;span style="color:#e6db74">&amp;#39;print(&amp;#34;Hello World!&amp;#34;)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello World!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>まごうことなきHello Worldですね。&lt;br>
まずはこのコマンドをそのままコンテナ環境で実行できるようにしていきましょう。&lt;br>
作業ディレクトリに、Dockerfileという名前のファイルを作成し、内容を下記の通りに編集してください。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> python:3.10.4-bullseye&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-c&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;print(&amp;#39;Hello World!&amp;#39;)&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>1行目は、&lt;code>FROM&lt;/code>というベースとなるイメージを取得してくるコマンドを実行しています。値として、&lt;code>イメージ名:タグ(任意)&lt;/code>の形式の文字列を与えることで、コンテナレジストリ&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>からイメージをダウンロードしてきます(Dockerではこれを&lt;code>pull&lt;/code>といいます)。また、タグが明示的に指定されなかった場合(今回であれば、&lt;code>FROM python&lt;/code>)には、最新のイメージ(&lt;code>latest&lt;/code>タグのイメージ)が指定されたものとして振る舞います。
今回は、&lt;code>Python&lt;/code>が実行できるイメージのうち、Pythonのバージョンが3.10.4でdebianのbullseyeならだいたい入ってそうなパッケージの詰まったもの(&lt;code>3.10.4-bullseye&lt;/code>)を持ってくるようにしています。&lt;br>
こうしたコンテナイメージは、&lt;a href="https://hub.docker.com/">Dockerhub&lt;/a>で探すことができます。&lt;/p>
&lt;p>2行目は、&lt;code>CMD&lt;/code>コマンドです。&lt;code>CMD&lt;/code>はDockerfileの中で一度しか使えないコマンドで、コンテナ起動時のデフォルトの挙動を定義します。今回はPythonでprintを実行するコマンドをデフォルトで定義しているので、コマンドの上書きをして実行をしなければ、コンテナ起動時にHello World! とプリントされます。&lt;code>CMD&lt;/code>には値として、&lt;code>実行したいコマンドをスペース区切りごとにダブルクォートで括ったもの&lt;/code>を&lt;code>[]&lt;/code>で括った文字列を渡します。&lt;/p>
&lt;p>では、このDockerfileをビルドして、ビルドしたイメージを起動してみましょう。&lt;/p>
&lt;p>まずはこのコマンドでビルドします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% docker build -f ./Dockerfile .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>おそらく、末尾に下記のような文言が出力されるはずです。IMAGE IDの部分を控えておいてください。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Successfully built &lt;span style="color:#f92672">{&lt;/span>IMAGE ID&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(ここから追記)&lt;/p>
&lt;p>Docker for Macを使っている場合はこの部分の出力が違うそうです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">=&lt;/span>&amp;gt; exporting to image 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; exporting layers 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; writing image &lt;span style="color:#f92672">{&lt;/span>IMAGE ID&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(ここまで追記)&lt;/p>
&lt;p>次に、このコマンドを実行することでコンテナが起動します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% docker run &lt;span style="color:#f92672">{&lt;/span>IMAGE ID&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>どうですか？ &lt;code>Hello World!&lt;/code> と出力され、正常に処理が終了したためコンテナも終了し、ターミナルに戻ったはずです。Dockerfileを書いて、コンテナイメージをビルドし、コンテナを立ち上げるという一連の流れを体験することができましたね！&lt;/p>
&lt;h3 id="自分用にタグを設定する">自分用にタグを設定する&lt;/h3>
&lt;p>ところで、先ほどの手順でIMAGE IDを利用するのが面倒ではありませんでしたか？&lt;br>
実は、&lt;code>--tag&lt;/code>(省略形は&lt;code>-t&lt;/code>)オプションを使うことで自分用にタグをつけることができ、そのタグを使ってコンテナイメージを指定することができます。
たとえばこんな感じです。&lt;/p>
&lt;pre tabindex="0">&lt;code>% docker build -f ./Dockerfile --tag=&amp;#34;python-tutorial:step1&amp;#34;.
% docker run python-tutorial:step1
&lt;/code>&lt;/pre>&lt;h3 id="ソースファイルをコンテナに同梱してファイルから実行できるようにする">ソースファイルをコンテナに同梱して、ファイルから実行できるようにする&lt;/h3>
&lt;p>このセクションのサンプルは&lt;a href="https://github.com/kei-s16/blog-docker-examples/tree/main/example2">example2&lt;/a>にあります。&lt;/p>
&lt;p>さきほどの手順では、コマンドラインから渡す形式でしかPythonスクリプトを実行することができませんでした。&lt;br>
しかし、実際のアプリケーションは複数のコマンドからなるため、ファイルにまとめられているはずです。さきほどの手順では、本格的なアプリケーションが実行できないのです&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>。&lt;br>
というわけで、このセクションではソースファイルからアプリを実行できるDockerコンテナを作成してみます。&lt;/p>
&lt;p>前のセクションで使ったDockerfileを編集するか、新しく作業ディレクトリを作成してDockerfileという名前のファイルを作成するかのどちらかを実施し、内容を下記の通りにしてください(改行は省略してもかまいません)。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> python:3.10.4-bullseye&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /usr/src/app&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> ./src .&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;./main.py&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>その後、Dockerfileのあるディレクトリに&lt;code>src&lt;/code>という名前のディレクトリを作成し、その中に&lt;code>main.py&lt;/code>というファイルを作成してください。中身は下記のように編集してください。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>さて、ここまでの手順で、作業ディレクトリの構造はこのようになっているはずです。&lt;/p>
&lt;pre tabindex="0">&lt;code>- 作業ディレクトリ
- Dockerfile
- src
- main.py
&lt;/code>&lt;/pre>&lt;p>ディレクトリの中身が正しいことを確認したら、下記のコマンドを実行して、どうなるか見てみましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code>% docker build -f ./Dockerfile --tag=&amp;#34;python-tutorial:step2&amp;#34; .
% docker run python-tutorial:step2
&lt;/code>&lt;/pre>&lt;p>どうでしたか？ &lt;code>Hello World!&lt;/code> と出力されましたか？&lt;/p>
&lt;p>ではここで、Dockerfileの中に書いた、新しいコマンドについて説明します。&lt;br>
&lt;code>WORKDIR&lt;/code>は、Dockerfileに書かれたコマンドを実行するディレクトリを変更するコマンドです。たとえば、&lt;code>WORKDIR /usr/src/app&lt;/code>を実行したあとの処理で&lt;code>pwd&lt;/code>を実行すれば&lt;code>/usr/src/app&lt;/code>と出力されますし、&lt;code>cat ./hoge&lt;/code>とすれば&lt;code>/usr/src/app/hoge&lt;/code>を出力しようとします。また、&lt;code>WORKDIR&lt;/code>で存在するディレクトリを指定するとそのディレクトリに移動するだけですが、存在しないディレクトリを指定した場合は、移動先のディレクトリを作成してから移動します。&lt;br>
&lt;code>COPY&lt;/code>は、コンテナをビルドする環境のファイルシステムから、コンテナに対してファイルをコピーするコマンドです。&lt;code>COPY ./src .&lt;/code>は、ビルド環境のカレントディレクトリにある&lt;code>src&lt;/code>ディレクトリを、コンテナのカレントディレクトリにコピーすることを意味します。&lt;/p>
&lt;p>これを踏まえて今回のDockerfileを読むと、&lt;/p>
&lt;ol>
&lt;li>&lt;code>/usr/src/app&lt;/code>に移動する&lt;/li>
&lt;li>ホストマシンの&lt;code>./src&lt;/code>から&lt;code>/usr/src/app&lt;/code>にファイルをコピーする&lt;/li>
&lt;li>デフォルトでは&lt;code>python /usr/src/app/main.py&lt;/code>を実行するように設定する&lt;/li>
&lt;/ol>
&lt;p>という処理がビルド時に実行されることがわかります。&lt;/p>
&lt;p>注意点として、あたりまえですが&lt;code>COPY&lt;/code>したファイルはコンテナイメージに含まれます。コンテナイメージをダウンロードした人は誰でもコンテナの中に置かれたファイルを見ることができるようになるということです。業務でも個人プロジェクトでもそうですが、機密情報はコンテナイメージの外(S3やDBなど)に持つようにする、&lt;code>ENV&lt;/code>コマンドを使うことで環境変数として起動時に初めて渡すようにし、イメージ内部には持たないようにするなどしましょう。そもそも機密を含むものが誰でも利用できるようになること自体避けたいわけですが(プロダクション用のイメージなどはプライベートレジストリを使うべきです)。&lt;/p>
&lt;h3 id="argを使ってみよう">ARGを使ってみよう&lt;/h3>
&lt;p>ここまで書いたDockerfileはすべてタグを固定で書いています。別のイメージを試したくなったときはDockerfileに手を加える必要があるわけですが、試すだけなのにエディタを開くのはちょっとおっくうです。&lt;br>
そこで、ビルドコマンドの引数でタグを渡してあげればいい感じに&lt;code>FROM&lt;/code>で持ってくるイメージを変えることができるようにしてみましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ARG&lt;/span> TAG&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3.10.4-bullseye&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> python:$TAG&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /usr/src/app&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> ./src .&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;./main.py&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>新しく追加した&lt;code>ARG&lt;/code>コマンドは、ビルド時に受けつける追加の引数名と、そのデフォルト値を定義できるコマンドです。例では、&lt;code>TAG&lt;/code>という引数を受けつけるようにし、その引数が与えられなかった場合は&lt;code>python:3.10.4-bullseye&lt;/code>が与えられたものとして振る舞うように設定されています。そして、&lt;code>TAG&lt;/code>は&lt;code>FROM&lt;/code>コマンドで利用されています。これで、ビルド時の引数としてイメージタグを受け取れるようになったわけです。&lt;br>
引数は&lt;code>--build-arg&lt;/code>オプションで与えます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% docker build -f ./Dockerfile --tag&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;python-tutorial:extra&amp;#34;&lt;/span> --build-arg TAG&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3.11-rc-bullseye&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ユースケースとしては、上記の例のように実行環境を気軽に上げて検証できるようにする、などがあります。その他にも、様々な使い方があります。いずれ活用してみてください。&lt;/p>
&lt;h3 id="pipを使う">pipを使う&lt;/h3>
&lt;p>このセクションのサンプルは&lt;a href="https://github.com/kei-s16/blog-docker-examples/tree/main/example3">example3&lt;/a>にあります。&lt;/p>
&lt;p>ここまでである程度ちゃんとしたPythonの実行を作成できるようになりましたが、なにか抜けていませんか？ そう、外部パッケージの利用です。&lt;br>
愚直な方法はビルドを実行するマシンで&lt;code>pip install&lt;/code>して、それを参照することですが、なんというかいろいろ問題がありますね。pipを使ううまみがほとんどないというか……。&lt;br>
でも、現時点で私たちが知っているビルドにコマンドを実行する方法は&lt;code>CMD&lt;/code>コマンドだけです。ここにコマンドを書いても、実行時コマンドの上書きで実行されない可能性がありますし、なにより&lt;code>CMD&lt;/code>はDockerfileのなかで一度しか使うことができません。&lt;br>
というわけで、&lt;code>CMD&lt;/code>以外のコマンドを使って、コンテナらしくビルド中に&lt;code>pip&lt;/code>を使えるようにし、コンテナ上のPythonで外部パッケージを扱ってみましょう。&lt;/p>
&lt;p>今回は、&lt;a href="https://pypi.org/project/colorama/">colorama&lt;/a>を利用して、文字列を赤く出力してみます。&lt;br>
&lt;a href="https://github.com/kei-s16/blog-docker-examples/tree/main/example3">example3&lt;/a>を参考に、お手元に必要なファイルを用意し、ビルドと実行をしてみてください。うまくいけば、赤文字でHello World! と表示されるはずです。&lt;/p>
&lt;p>さて、どうやって&lt;code>pip install&lt;/code>と&lt;code>python main.py&lt;/code>のふたつを実行できるようにしたのでしょうか？ 答えはこの行にあります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">RUN&lt;/span> pip install --no-cache-dir -r requirements.txt&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここで登場する&lt;code>RUN&lt;/code>というコマンドは、コンテナのビルドの途中で任意のコマンドを実行するために使われます。&lt;code>CMD&lt;/code>と違い、コマンドはふだんシェルで入力する形で与えることもできます。&lt;code>CMD&lt;/code>で実行する処理に必要な前準備は、&lt;code>RUN&lt;/code>を使って記述します。たとえば、今回のようなアプリケーションが利用する外部パッケージのインストールのほか、外部サービスから設定をダウンロードしてきたり、ソースコードから実行可能なバイナリをビルドしたりするのには&lt;code>RUN&lt;/code>コマンドを使うといいと思います&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>。&lt;/p>
&lt;h2 id="終わりに">終わりに&lt;/h2>
&lt;p>今回は、基本的なアプリケーションを実行するために必要な最低限のDockerfile知識をまとめました。&lt;br>
この次のステップは、自分のサービスを動かしてみることになると思います。そのステップをやりきるには、この記事にある情報だけでは難しいと思います。公式ドキュメントに軽く目を通しながら進めていくことを強くおすすめします。&lt;br>
また、記事では触れませんでしたが、リポジトリには&lt;code>ステージ&lt;/code>とそれを活用した&lt;code>マルチステージビルド&lt;/code>の例も置いています&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>。気になる方はどうぞ。&lt;/p>
&lt;p>コメントや誤りの連絡は、&lt;a href="https://github.com/kei-s16/kei-s16.github.io/issues/new">issue&lt;/a>にお願いします。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>厳密には、&lt;code>カーネルレベルの依存関係をすべてホストマシンに委ねることで、Dockerを利用している開発者の視点では任意の必要なソフトウェアだけでのアプリケーションの実行が可能になっているように見える&lt;/code>。Dockerの実行環境自身がときどきこのあたり意識することを要求してくる。ECSやCloud Runなどのマネージドなコンテナ実行環境を利用するなら、この部分はクラウド事業者が管理してくれるのである程度無視できる。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>このセクションには理想が多分に含まれている。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>厳密にはコンテナ仮想化技術。&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>誰向けなのかわからない注釈 : Vagrantfileのようなものを想像するとわかりやすい。&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>なんでこんなことを書いているのかって？ ひどい目にあったからですよ(なんもわかってないときに書いたDockerfileを直しながら)。&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>タグだけ与えた場合はデフォルトではDockerhubから取得してくる。URIを与えることで、任意のコンテナレジストリ&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>から取得することができる。&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7">
&lt;p>ここでワンライナーを持ち出すのはやめてください。&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8">
&lt;p>とはいえ、&lt;code>RUN&lt;/code>にはビルドの仕組みを知らないとひっかかりやすい落とし穴があったりする。ガリガリ書き始めるまえに、公式ドキュメントを読むことをおすすめします。&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9">
&lt;p>途中で力尽きたとも言う。想定読者的にはまだいらんじゃろという気持ちもある&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10">
&lt;p>Elastic Container Registry, Github Contgainer Registry, 自宅に立てたオレオレレジストリなど。&amp;#160;&lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item><item><title>Github PagesにHugoをデプロイする</title><link>/posts/hugo-on-github-pages/</link><pubDate>Mon, 21 Feb 2022 01:00:00 +0900</pubDate><guid>/posts/hugo-on-github-pages/</guid><description>目次 前置き 背景 選定 やっていき 設計 実装 Hugo GitHubActions GitHub Pagesの設定 完走した感想 前置き 背景 gistなどで管理していたもろもろのメモをもうちょっときれいに見せたくなったので、ブログ形式で残すことにしました。 が、今日日どっかのブログサービスもなーでも自前でWordPressなんかもちょっとキツいなーという感じです。 これだけで伝わらないと思うので、気持ち的な要件をリストアップすると、こんな感じ。 テキストがブラウザ</description><content>&lt;h2 id="目次">目次&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="#%E5%89%8D%E7%BD%AE%E3%81%8D">前置き&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#%E8%83%8C%E6%99%AF">背景&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%81%B8%E5%AE%9A">選定&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#%E3%82%84%E3%81%A3%E3%81%A6%E3%81%84%E3%81%8D">やっていき&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#%E8%A8%AD%E8%A8%88">設計&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%AE%9F%E8%A3%85">実装&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#hugo">Hugo&lt;/a>&lt;/li>
&lt;li>&lt;a href="#github-actions">GitHubActions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#github-pages%E3%81%AE%E8%A8%AD%E5%AE%9A">GitHub Pagesの設定&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#%E5%AE%8C%E8%B5%B0%E3%81%97%E3%81%9F%E6%84%9F%E6%83%B3">完走した感想&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="前置き">前置き&lt;/h2>
&lt;h3 id="背景">背景&lt;/h3>
&lt;p>gistなどで管理していたもろもろのメモをもうちょっときれいに見せたくなったので、ブログ形式で残すことにしました。&lt;br>
が、今日日どっかのブログサービスもなーでも自前でWordPressなんかもちょっとキツいなーという感じです。&lt;br>
これだけで伝わらないと思うので、気持ち的な要件をリストアップすると、こんな感じ。&lt;/p>
&lt;ol>
&lt;li>テキストがブラウザ上で快適に読める状態であればそれでいい。コメントとかいらない。&lt;/li>
&lt;li>特定のサービスに依存する形にしたくない。なにかあったときは最悪自前で気楽に(ここ重要)ホスティングできるようにしたい。&lt;/li>
&lt;li>セキュリティ周りをなるべく意識したくない。ログイン画面隠したりCMSのバージョン気にしたりしたくない。&lt;/li>
&lt;/ol>
&lt;p>もうこれ、静的サイトジェネレーター(SSG)しかないじゃん、ということで、そうしました。&lt;/p>
&lt;h3 id="選定">選定&lt;/h3>
&lt;p>候補は2つありました。&lt;br>
1つは&lt;a href="https://www.getzola.org/">Zola&lt;/a>。Rust製のSSGツールになります。&lt;br>
もうひとつは&lt;a href="https://gohugo.io/">Hugo&lt;/a>。こちらはGo製。&lt;br>
どちらもmarkdownのテキストファイルからブログの形をしたhtmlを吐き出してくれるツールです。&lt;br>
ドキュメントをさっと読んだ感じではZolaもHugoも機能的にはあまり差がなさそうでした。開発の活発度合いも変わりなく、強いて言えば数年先行しているHugoのほうが英語・日本語ともにドキュメントが見つかりやすい雰囲気です。&lt;br>
&lt;del>宗教&lt;/del>好みで言えばZolaですが、今回はサクっとやってしまいたかったので、Hugoをチョイスしました。&lt;/p>
&lt;p>サーバというか配信にはGitHub Pagesを使用することにします。&lt;br>
無料だしGitHub Actionsでいろいろできるし、なにより必然的にGitHubリポジトリで管理する = 手持ちの端末どれからでも投稿ができる。&lt;/p>
&lt;h2 id="やっていき">やっていき&lt;/h2>
&lt;h3 id="設計">設計&lt;/h3>
&lt;p>&lt;img src="/images/hugo-on-github-pages/githubpages.png" alt="全体の図">&lt;/p>
&lt;p>こんな感じにすることにします。&lt;br>
mdファイル(というかソース)を管理するリポジトリと、公開用のリポジトリを分けているのは、なんとなくです。分ける必要もないと思うっちゃ思うのですが、せっかくだからわけることにしました。やったことでゴミみたいなコミットしてるのが外には見えないのでそれはメリットかも。&lt;/p>
&lt;h3 id="実装">実装&lt;/h3>
&lt;h4 id="hugo">Hugo&lt;/h4>
&lt;p>Hugo側の設定はあまり気にすることがありません。&lt;br>
強いて言えばテーマをどう管理するかくらいですが、外部テーマを使う場合はgit submoduleを使うことが推奨されているようです。&lt;br>
今回私が選んだテーマは&lt;a href="https://github.com/panr/hugo-theme-terminal">panr/hugo-theme-terminal&lt;/a>です。こちらもREADMEにて手の込んだ改変をしない限りはgit submoduleを使うことを推奨していました。テーマを触る気はいまのところあんまりないので、submoduleを利用するパターンを採用します。&lt;/p>
&lt;h4 id="github-actions">GitHub Actions&lt;/h4>
&lt;p>GitHub Actions、つまりはデプロイ=記事の投稿です。&lt;br>
&lt;a href="https://rmoff.net/2020/12/20/scheduling-hugo-builds-on-github-pages-with-github-actions/">Scheduling Hugo Builds on GitHub pages with GitHub Actions&lt;/a>という記事を参考に、ちょっと手を入れたデプロイを組んでいます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">build-and-deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">checkout source&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">submodules&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">remove .gitignore&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">rm ./.gitignore&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">setup hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;latest&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --minify&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">copy verify files to public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">cp ./verify/* ./public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">if&lt;/span>: &lt;span style="color:#ae81ff">${{ github.ref == &amp;#39;refs/heads/main&amp;#39; }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">deploy_key&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">external_repository&lt;/span>: &lt;span style="color:#ae81ff">kei-s16/kei-s16.github.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">publish_dir&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">publish_branch&lt;/span>: &lt;span style="color:#ae81ff">main&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>やっていることは元記事と同じくhugoでビルドして、公開用リポジトリにpushしているだけです。&lt;br>
違うところはといえば、&lt;/p>
&lt;ul>
&lt;li>私の場合はgitignoreでソースリポジトリに生成物を持たない(public以下を持たない)ようにしているため、そこをごにょごにょするための処理を追加した&lt;/li>
&lt;li>GitHub Pagesで独自ドメインを当てたり、keybaseの認証をしたりするのに必要なファイル(verify以下)を一緒にデプロイしている&lt;/li>
&lt;li>公開リポジトリには生成物(public以下)しか持たないようにした&lt;/li>
&lt;/ul>
&lt;p>の3点です。&lt;br>
上記のコードにより、mainブランチにmdファイルやらなにやらをマージすることで、公開リポジトリにhtmlファイルを送りつけてくれるようになりました。&lt;/p>
&lt;h4 id="github-pagesの設定">GitHub Pagesの設定&lt;/h4>
&lt;p>&lt;code>{ユーザ名}.github.io&lt;/code>ドメインのままで問題なければ、リポジトリのsettingsからpagesを有効にするだけです。&lt;br>
独自ドメインを当てたい場合は公式ドキュメントを参考にしつつ、&lt;code>{ユーザ名}.github.io&lt;/code> に対する独自ドメインのCNAMEレコードを作成してください。&lt;br>
注意が必要なのが、ドメインの検証に時間がかかることと、HTTPSでの接続を有効にするのにさらに時間がかかることです。時間に余裕を持って作業しましょう。&lt;/p>
&lt;h2 id="完走した感想">完走した感想&lt;/h2>
&lt;ul>
&lt;li>Pull-Requestベースで管理できるのめっちゃ楽&lt;/li>
&lt;li>vimで書けるのめっちゃ楽&lt;/li>
&lt;li>DBのバージョンとかPHPのバージョンとかCMSのバージョンとかプラグインのバージョンとか気にしなくていいのほんと楽&lt;/li>
&lt;/ul></content></item><item><title>2021年のふりかえり</title><link>/posts/furikaeri-2021/</link><pubDate>Fri, 31 Dec 2021 20:00:00 +0900</pubDate><guid>/posts/furikaeri-2021/</guid><description>移植 : https://gist.github.com/kei-s16/b84ab3aa76c47d3adf84c540c3c39f98 tl;dr バックエンドエンジニア（自称）からおおむねインフラエンジニアになりました 自宅開発環境を大進化させました 仕事 まず大きな変更についてです。 去年はPHPでアプリを書いていましたが、今年の1月から異動になり、業務領域の軸足をインフラ（クラウド）側に移すことになりました。 領域的には大移動ですが、異動が告知された段階である程度の基礎知識はあったので、かなり厳しい量のキャッチアップを強いられる、といっ</description><content>&lt;p>移植 : &lt;a href="https://gist.github.com/kei-s16/b84ab3aa76c47d3adf84c540c3c39f98">https://gist.github.com/kei-s16/b84ab3aa76c47d3adf84c540c3c39f98&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="tldr">tl;dr&lt;/h2>
&lt;ul>
&lt;li>バックエンドエンジニア（自称）からおおむねインフラエンジニアになりました&lt;/li>
&lt;li>自宅開発環境を大進化させました&lt;/li>
&lt;/ul>
&lt;h2 id="仕事">仕事&lt;/h2>
&lt;p>まず大きな変更についてです。&lt;br>
去年はPHPでアプリを書いていましたが、今年の1月から異動になり、業務領域の軸足をインフラ（クラウド）側に移すことになりました。&lt;br>
領域的には大移動ですが、異動が告知された段階である程度の基礎知識はあったので、かなり厳しい量のキャッチアップを強いられる、といったことはありませんでした。&lt;br>
ある程度のぼやかしを加えてやったことを思い起こすと&lt;/p>
&lt;ul>
&lt;li>稼動しているwebサービスのインフラterraform化とAWSアカウント移行&lt;/li>
&lt;li>新規インフラの構築複数&lt;/li>
&lt;li>メンテナが不在になってしまったサービスの現状把握複数&lt;/li>
&lt;/ul>
&lt;p>などをやっていました。&lt;br>
その他にもAnsibleなどの管理ツールや社内アプリの細かな改修、サイトリニューアルのお手伝い、障害対応にも取り組みました。&lt;/p>
&lt;p>技術スタックとしては&lt;/p>
&lt;ul>
&lt;li>Terraform&lt;/li>
&lt;li>Ansible
&lt;ul>
&lt;li>Ansistrano&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GitHub Actions&lt;/li>
&lt;li>Docker&lt;/li>
&lt;li>AWS
&lt;ul>
&lt;li>VPC関連&lt;/li>
&lt;li>ECS&lt;/li>
&lt;li>CloudFormation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>このあたりが身についたかなと思います。&lt;br>
特に、AnsibleとDockerは自宅サーバの運用と相互にフィードバックできたのでうま味がありました。&lt;/p>
&lt;p>また、チーム移動に際して、以前のチームの文化をいくつか持ち込みました。&lt;br>
そのなかでも週次ふりかえりは既存メンバーにも好評ですし、効果としても各々が感じていたぼんやりとした不安を目に見える課題として取り組めるようになるなど、それなりに機能させられているかなと思います。&lt;br>
もちろん、まだまだ課題が残っている状態ではあるので、引き続き改善していきたいです。&lt;/p>
&lt;p>人周りについても、後輩が入ってきたりお世話になった方が退職されたりいろいろありました。&lt;br>
後輩に関しては既にインフラ周りで追い抜かれつつあったりしているので&lt;del>背後から圧を感じつつ&lt;/del>いい感じにモチベーション源になっています。&lt;/p>
&lt;h2 id="個人">個人&lt;/h2>
&lt;h3 id="k8s">k8s&lt;/h3>
&lt;p>入門しました。&lt;br>
archlinux ARM on Raspberry Pi 4 * 4 でARMな感じのClusterを作成し、日々壊しつつ個人ツール群を運用しています。&lt;br>
依存パッケージの変更で泣かされ、クラスタバージョンアップの実施で泣かされ、とわりと泣かされつつもk8sっぽいことはひと通りやってみて、手触りとしては悪くないな……という感じです。&lt;br>
EKSやGKEなどのManagedな感じのk8sはまたちょっと勝手が違うようなのでそのうちそちらも触ってみたいなーと思っています。&lt;/p>
&lt;h3 id="proxmox">proxmox&lt;/h3>
&lt;p>導入しました。&lt;br>
が、退役させました。&lt;br>
ESXiのような仮想化基盤が欲しいなーと思って組んでみたのですが、ちょっと帯に短し襷に長しな感じがしたためです（あと、Debianベースなのがつらかった）。&lt;br>
とはいえ、作業用に使い捨てのarchをぽこぽこ生やせるのは体験としてとてもよかったので、どこかで再チャレンジしてみたいなーと思います。&lt;br>
2台以上のクラスタ、分散ストレージの利用、Cloudinitの活用ができればたぶんもっといけるはず（やれてなかった）。&lt;/p>
&lt;h3 id="自宅サーバ">自宅サーバ&lt;/h3>
&lt;p>すべてarchlinuxに統一しました。Ansibleすっきりさせられてよかった。&lt;br>
が、なぜか台数が増えてきてしまったので、そろそろLDAPかなにかを導入せねば、という重すぎる課題が残ってしまいました。ガンバルゾー&lt;br>
また、外からアクセスするためにtailscaleを使い始めました。こちらも便利なので、VPN利用を検討している方にはとりあえずおすすめしています。&lt;/p>
&lt;h3 id="開発環境">開発環境&lt;/h3>
&lt;p>&lt;del>Macが嫌いなので&lt;/del> Windowsでも開発できたら考えることが減るので、ということで、個人開発環境を下記に変えました。&lt;/p>
&lt;ul>
&lt;li>archlinuxなLinuxデスクトップ&lt;/li>
&lt;li>Windows 11 + scoop + msys2 + zsh&lt;/li>
&lt;/ul>
&lt;p>使い分けとしては、サクっとやるときはメインのWindows機で、がっつりやるときはそこから別マシンのLinuxへSSH or Linuxデスクトップで開発しています。&lt;br>
Windowsが10からLinuxに寄せてきているのもあり、CUIの中では基本手触りが同じなので、へんな切り替えコストが減ってだいぶ楽になりました。&lt;br>
ほぼ10年もののMBPもこれで退役です。&lt;/p>
&lt;h3 id="その他">その他&lt;/h3>
&lt;p>Rustでなんか書いたり他人のツールリポジトリにコミットしたりしました。あとはだいたいシェル芸。&lt;br>
それから、OSSの団体や開発者への寄付を始めました。いろいろと、これがないと困る！　というくらいには依存しているので、日頃の感謝を込めて。&lt;/p>
&lt;h2 id="開発以外">開発以外&lt;/h2>
&lt;ul>
&lt;li>ミニ四駆始めました&lt;/li>
&lt;li>バイク買いました&lt;/li>
&lt;/ul></content></item><item><title>k8s Cluster on Raspberry Pi</title><link>/posts/k8s-cluster-on-raspberry-pi/</link><pubDate>Wed, 10 Feb 2021 20:00:00 +0900</pubDate><guid>/posts/k8s-cluster-on-raspberry-pi/</guid><description>kei-s16/k8s-arch-rpi-cluster.md を元に加筆・修正を行ったものです 基本的に2021年頭の情報になっており、すでに時代遅れであったり、間違いに気づいて実際の運用では改善済のものが記事には含まれています なにやったのか？ rpi4 * 3 で k8s クラスタを作る 構成 rpi 4 (4GB) Arch Linux (ARM) 作業環境 Raspbianイメージ焼くところ Windowsの世界 もろもろの雑用 Arch on WSL2 kei@Win-Desktop-wsl OS: Arch Linux on Windows 10 x86_64 Kernel: 5.4.72-microsoft-standard-WSL2 Shell: zsh 5.8 CPU: AMD Ryzen 7 3800X (16) @ 3.892GHz Memory: 279MiB / 12733MiB ArchLinux for ARM64がんばるところ Raspbian(32bit) Kubernet</description><content>&lt;p>&lt;a href="https://gist.github.com/kei-s16/91cc87b127f38cfed28fe625ae8c9ba9">kei-s16/k8s-arch-rpi-cluster.md&lt;/a> を元に加筆・修正を行ったものです&lt;br>
基本的に2021年頭の情報になっており、すでに時代遅れであったり、間違いに気づいて実際の運用では改善済のものが記事には含まれています&lt;/p>
&lt;hr>
&lt;h2 id="なにやったのか">なにやったのか？&lt;/h2>
&lt;p>rpi4 * 3 で k8s クラスタを作る&lt;/p>
&lt;h2 id="構成">構成&lt;/h2>
&lt;ul>
&lt;li>rpi 4 (4GB)
&lt;ul>
&lt;li>Arch Linux (ARM)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="作業環境">作業環境&lt;/h2>
&lt;h3 id="raspbianイメージ焼くところ">Raspbianイメージ焼くところ&lt;/h3>
&lt;p>Windowsの世界&lt;/p>
&lt;h3 id="もろもろの雑用">もろもろの雑用&lt;/h3>
&lt;p>Arch on WSL2&lt;/p>
&lt;pre tabindex="0">&lt;code>kei@Win-Desktop-wsl
OS: Arch Linux on Windows 10 x86_64
Kernel: 5.4.72-microsoft-standard-WSL2
Shell: zsh 5.8
CPU: AMD Ryzen 7 3800X (16) @ 3.892GHz
Memory: 279MiB / 12733MiB
&lt;/code>&lt;/pre>&lt;h3 id="archlinux-for-arm64がんばるところ">ArchLinux for ARM64がんばるところ&lt;/h3>
&lt;p>Raspbian(32bit)&lt;/p>
&lt;h3 id="kubernetesがんばるところ">Kubernetesがんばるところ&lt;/h3>
&lt;p>ArchLinux ARM(64bit) on Raspberry Pi&lt;/p>
&lt;h2 id="作業手順">作業手順&lt;/h2>
&lt;h3 id="下準備フェイズ">下準備フェイズ&lt;/h3>
&lt;ol>
&lt;li>組み立てやってテンション上げる&lt;/li>
&lt;li>メインのLANにぶらさげるLANのセットアップ&lt;/li>
&lt;li>Raspbian を headlessでインストール
&lt;ol>
&lt;li>ルータに有線で接続してssh
&lt;ol>
&lt;li>新ユーザ作ってpiユーザ消す&lt;/li>
&lt;li>パスワード→鍵認証はやらない(raspbianをこのあと使わないので)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Raspbian 上 で ArchLinux ARM を焼く&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># $はすべて sudo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ fdisk /dev/sda
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># いいかんじにパーティション切る&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ mkfs.vfat /dev/sda1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ mkdir boot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ mount /dev/sda1 boot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ mkfs.ext4 /dev/sda2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ mkdir root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ mount /dev/sda2 root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># イメージ落とす&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ wget http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-aarch64-latest.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># ここから先はsuする&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ su
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% bsdtar -xpf ArchLinuxARM-rpi-4-latest.tar.gz -C root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% sync
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 64bit かつ rpi4 なので&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% sed -i &lt;span style="color:#e6db74">&amp;#39;s/mmcblk0/mmcblk1/g&amp;#39;&lt;/span> root/etc/fstab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% mv root/boot/* boot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># マウントしたらちゃんとアンマウントしようね&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>% umount boot root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># これを3セット (さらに別用途で+1セットやったのは秘密)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="本作業フェイズ">本作業フェイズ&lt;/h3>
&lt;h4 id="各マシンにホスト名ふったりユーザ作ったり">各マシンにホスト名ふったりユーザ作ったり&lt;/h4>
&lt;ul>
&lt;li>&lt;code>pacman -Syyu&lt;/code> めっちゃ重い(国内ミラーなさそう)&lt;/li>
&lt;li>&lt;code>pacman -S sudo&lt;/code>&lt;/li>
&lt;li>ホスト名変えた
&lt;ul>
&lt;li>kisaragi&lt;/li>
&lt;li>mogami&lt;/li>
&lt;li>kumano&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>sudoersいじった&lt;/li>
&lt;li>公開鍵認証以外封じた&lt;/li>
&lt;/ul>
&lt;h4 id="kubernetesまわりガーっとインストール">Kubernetesまわりガーっとインストール&lt;/h4>
&lt;ul>
&lt;li>Ansibleでやろうとしたが、pacmanだけでなくyayも使うのでちょっと厳しかった
&lt;ul>
&lt;li>ので横着してシェルスクリプト書いたが横着しすぎてコケた
&lt;ul>
&lt;li>ので最終的に半手作業……&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash -eu
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>pacman -S git base base-devel --noconfirm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir ~/build/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd ~/build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://aur.archlinux.org/yay.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd ~/build/yay
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>makepkg -si --noconfirm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd ~/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yay -S docker kubelet-bin kubeadm-bin kubectl-bin ebtables ethtool socat conntrack-tools cni-plugins --noconfirm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="kubernetesセットアップ">Kubernetesセットアップ&lt;/h4>
&lt;h5 id="全体構成">全体構成&lt;/h5>
&lt;ul>
&lt;li>kisaragi : Master&lt;/li>
&lt;li>mogami : node&lt;/li>
&lt;li>kumano : node&lt;/li>
&lt;/ul>
&lt;p>お船じゃないよ&lt;/p>
&lt;h5 id="kisaragiのセットアップ前半戦">kisaragiのセットアップ前半戦&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo kubeadm init --pod-network-cidr&lt;span style="color:#f92672">=&lt;/span>10.244.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p $HOME/.kube
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo chown &lt;span style="color:#66d9ef">$(&lt;/span>id -u&lt;span style="color:#66d9ef">)&lt;/span>:&lt;span style="color:#66d9ef">$(&lt;/span>id -g&lt;span style="color:#66d9ef">)&lt;/span> $HOME/.kube/config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="mogami--kumanoのセットアップ">mogami &amp;amp; kumanoのセットアップ&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo systemctl enable kubelet.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl start kubelete.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo kubeadm join &lt;span style="color:#f92672">{&lt;/span>いろんなひみつのオプション&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="kisaragiのセットアップ後半戦">kisaragiのセットアップ後半戦&lt;/h5>
&lt;p>クラスターにノードを参加させる&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl label node mogami node-role.kubernetes.io/worker&lt;span style="color:#f92672">=&lt;/span>worker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl label node kumano node-role.kubernetes.io/worker&lt;span style="color:#f92672">=&lt;/span>worker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kisaragi% kubectl version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Client Version: version.Info&lt;span style="color:#f92672">{&lt;/span>Major:&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>, Minor:&lt;span style="color:#e6db74">&amp;#34;20&amp;#34;&lt;/span>, GitVersion:&lt;span style="color:#e6db74">&amp;#34;v1.20.2&amp;#34;&lt;/span>, GitCommit:&lt;span style="color:#e6db74">&amp;#34;faecb196815e248d3ecfb03c680a4507229c2a56&amp;#34;&lt;/span>, GitTreeState:&lt;span style="color:#e6db74">&amp;#34;clean&amp;#34;&lt;/span>, BuildDate:&lt;span style="color:#e6db74">&amp;#34;2021-01-13T13:28:09Z&amp;#34;&lt;/span>, GoVersion:&lt;span style="color:#e6db74">&amp;#34;go1.15.5&amp;#34;&lt;/span>, Compiler:&lt;span style="color:#e6db74">&amp;#34;gc&amp;#34;&lt;/span>, Platform:&lt;span style="color:#e6db74">&amp;#34;linux/arm64&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Server Version: version.Info&lt;span style="color:#f92672">{&lt;/span>Major:&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>, Minor:&lt;span style="color:#e6db74">&amp;#34;20&amp;#34;&lt;/span>, GitVersion:&lt;span style="color:#e6db74">&amp;#34;v1.20.2&amp;#34;&lt;/span>, GitCommit:&lt;span style="color:#e6db74">&amp;#34;faecb196815e248d3ecfb03c680a4507229c2a56&amp;#34;&lt;/span>, GitTreeState:&lt;span style="color:#e6db74">&amp;#34;clean&amp;#34;&lt;/span>, BuildDate:&lt;span style="color:#e6db74">&amp;#34;2021-01-13T13:20:00Z&amp;#34;&lt;/span>, GoVersion:&lt;span style="color:#e6db74">&amp;#34;go1.15.5&amp;#34;&lt;/span>, Compiler:&lt;span style="color:#e6db74">&amp;#34;gc&amp;#34;&lt;/span>, Platform:&lt;span style="color:#e6db74">&amp;#34;linux/arm64&amp;#34;&lt;/span>&lt;span style="color:#f92672">}}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="なんかpod動かしてみる">なんかpod動かしてみる&lt;/h4>
&lt;p>オレオレDocker Registry置くことにした&lt;/p>
&lt;p>deployment.yml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">apps/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">docker-registry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">docker-registry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">replicas&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">selector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matchLabels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">docker-registry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">template&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">app&lt;/span>: &lt;span style="color:#ae81ff">docker-registry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hostNetwork&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tolerations&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">node-role.kubernetes.io/master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">effect&lt;/span>: &lt;span style="color:#ae81ff">NoSchedule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nodeSelector&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kubernetes.io/hostname&lt;/span>: &lt;span style="color:#ae81ff">kisaragi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">docker-registry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">registry:2.7.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">containerPort&lt;/span>: &lt;span style="color:#ae81ff">5000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumeMounts&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">registry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">mountPath&lt;/span>: &lt;span style="color:#ae81ff">/var/lib/registry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">registry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hostPath&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">Directory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">/mnt/exthdd/registry&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これをデプロイして、外からpull &amp;amp; pushしてみる&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>sudo docker pull hello-world
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo docker tag hello-world kisaragi.local:5000/hello-world
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo docker push kisaragi.local:5000/hello-world
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>動いた！&lt;/strong>&lt;/p>
&lt;h2 id="その他もろもろ">その他もろもろ&lt;/h2>
&lt;h3 id="つらかったこと">つらかったこと&lt;/h3>
&lt;ul>
&lt;li>アップデートで再起動かけたら &lt;code>kubectl&lt;/code> コケた
&lt;ul>
&lt;li>masterで &lt;code>systemctl enable kubelet&lt;/code> 忘れてた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>一瞬世界から孤立したサーバを産み落としてしまった
&lt;ul>
&lt;li>&lt;code>~/.ssh/authorized_keys&lt;/code> を消してしまった&lt;/li>
&lt;li>別マシンでSDカードをマウントして &lt;code>authorized_keys&lt;/code> を作ることでごまかした
&lt;ul>
&lt;li>&lt;code>chmod {ユーザ名}:sudo authorized_keys&lt;/code> 忘れずにね&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="やらなかったこと今後やりたいこと">やらなかったこと(今後やりたいこと)&lt;/h3>
&lt;ul>
&lt;li>PoE(USBケーブル邪魔じゃね？)&lt;/li>
&lt;li>ノード台数の拡張&lt;/li>
&lt;li>無線LANルータがちょっと残念だったので改善
&lt;ul>
&lt;li>ラズパイルータにしちゃう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="結論">結論&lt;/h2>
&lt;ul>
&lt;li>ArchLinuxはいいぞ&lt;/li>
&lt;li>k8sはいいぞ&lt;/li>
&lt;li>横着はよくないぞ&lt;/li>
&lt;/ul>
&lt;h2 id="参考記事">参考記事&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-4">Raspberry Pi 4 | ArchLinux ARM&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/tomotomo/items/2ff445377c13f9db38e2">Raspberry Pi 4 のMACアドレスの範囲が変わったぞ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developers.cyberagent.co.jp/blog/archives/14721/">3日間クッキング【Kubernetes のラズペリーパイ包み　“サイバーエージェント風】&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/go_vargo/items/d1271ab60f2bba375dcc">Raspberry PiでおうちKubernetes構築【物理編】&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/go_vargo/items/29f6d832ea0a289b4778">Raspberry PiでおうちKubernetes構築【論理編】&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/temeteke/items/04960c96edee113bd053">Raspberry Pi 4とArch Linux(64bit)で作るKubernetesクラスタ)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sminamot-dev.hatenablog.com/entry/2020/01/26/111949">Raspberry Pi 4 でおうちk8sクラスタを構築する&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/yuyakato/items/c5b1b1293c5879e231ab">おうちk8sクラスタを作る: Dockerレジストリ編&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="補足">補足&lt;/h2>
&lt;p>重要なものだけ補足&lt;/p>
&lt;blockquote>
&lt;p>pacman -Syyu めっちゃ重い(国内ミラーなさそう)&lt;/p>
&lt;/blockquote>
&lt;p>という記述がありましたが、2021/11/18にAsahi Linuxが国内ミラーを作成してくれました！&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">We noticed that there was no Arch Linux ARM mirror in Japan, so we&amp;#39;re sponsoring one now 😊&lt;br>&lt;br>If you&amp;#39;re in Japan or nearby, feel free to point your pacman.d/mirrorlist at &lt;a href="https://t.co/GM69rZE3tC">https://t.co/GM69rZE3tC&lt;/a>!&lt;a href="https://t.co/erKHtHwFfX">https://t.co/erKHtHwFfX&lt;/a> &lt;a href="https://t.co/m0opnupc5i">pic.twitter.com/m0opnupc5i&lt;/a>&lt;/p>&amp;mdash; Asahi Linux (@AsahiLinux) &lt;a href="https://twitter.com/AsahiLinux/status/1461268746878656513?ref_src=twsrc%5Etfw">November 18, 2021&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></content></item><item><title>systemctl timer unitを使ってcronを置き換えたときのメモ</title><link>/posts/use-systemd-timer-instead-of-crond/</link><pubDate>Wed, 17 Jun 2020 20:00:00 +0900</pubDate><guid>/posts/use-systemd-timer-instead-of-crond/</guid><description>移植 : https://gist.github.com/kei-s16/eb5eb5f6657e17eb8e9a422c167e62e0 概略 systemdのユニットを定期的に再起動するために 再起動用のサービスユニット 上記ユニットのタイマーユニット を作成し、ついでに実行時にwebhookを使ってDiscordに通知を飛ばす 前提とかおことわりとか Indigo(6vCPU, 8GB)上のUbuntu 18.04で動かしています。 今回定期的に再起動したいサービスユニットは、ARKのプライベートサーバ 上記のサービスユニットをこの記事では(wikiと同じく)ar</description><content>&lt;p>移植 : &lt;a href="https://gist.github.com/kei-s16/eb5eb5f6657e17eb8e9a422c167e62e0">https://gist.github.com/kei-s16/eb5eb5f6657e17eb8e9a422c167e62e0&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="概略">概略&lt;/h3>
&lt;p>systemdのユニットを定期的に再起動するために&lt;/p>
&lt;ul>
&lt;li>再起動用のサービスユニット&lt;/li>
&lt;li>上記ユニットのタイマーユニット&lt;/li>
&lt;/ul>
&lt;p>を作成し、ついでに実行時にwebhookを使ってDiscordに通知を飛ばす&lt;/p>
&lt;h3 id="前提とかおことわりとか">前提とかおことわりとか&lt;/h3>
&lt;ul>
&lt;li>Indigo(6vCPU, 8GB)上のUbuntu 18.04で動かしています。&lt;/li>
&lt;li>今回定期的に再起動したいサービスユニットは、&lt;a href="https://ark.gamepedia.com/Dedicated_Server_Setup">ARKのプライベートサーバ&lt;/a>&lt;/li>
&lt;li>上記のサービスユニットをこの記事では(wikiと同じく)&lt;code>ark-dedicated.service&lt;/code>という名前で登録しています。別名で登録している場合や別のユニットを対象とする場合は適宜読み替えてください。&lt;/li>
&lt;li>systemdまわりめちゃくちゃ浅い理解で書いてます。&lt;/li>
&lt;li>コケたときのことはなにも考えてません。&lt;/li>
&lt;/ul>
&lt;h3 id="まずは定期的に再起動するように">まずは定期的に再起動するように&lt;/h3>
&lt;h4 id="再起動用のサービスユニットを作る">再起動用のサービスユニットを作る&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-restart-ark-dedicated.service" data-lang="restart-ark-dedicated.service">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Description&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">Restart ark-dedicated.service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[Service]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">oneshot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ExecStart&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">/bin/systemctl try-restart ark-dedicated.service&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="タイマーユニットを作る">タイマーユニットを作る&lt;/h4>
&lt;p>今回は誰も遊んでいないであろう毎週水曜日正午に再起動処理を実行することにします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-restart-ark-dedicated.timer" data-lang="restart-ark-dedicated.timer">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Description&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">Restart ark-dedicated.service every wednesday&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[Timer]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">OnCalendar&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">Wed 12:00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Persistent&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[Install]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">WantedBy&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">timers.target&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="webhookで通知する">webhookで通知する&lt;/h3>
&lt;p>いちいち再起動するよーとかしたよーとか言うのもめんどうなので。&lt;/p>
&lt;h4 id="まずは試してみる">まずは試してみる&lt;/h4>
&lt;p>&lt;code>通知をしたいDiscordサーバのサーバ設定→ウェブフック&lt;/code>からウェブフックを作り、webhook URLを取得します。&lt;/p>
&lt;p>とりあえず下記コマンドで雑にメッセージを投げてみる。&lt;/p>
&lt;pre tabindex="0">&lt;code>curl -X POST -H &amp;#39;Content-Type: application/json&amp;#39; -d &amp;#39;{&amp;#34;content&amp;#34; : &amp;#34;test&amp;#34;}&amp;#39; webhookのurl
&lt;/code>&lt;/pre>&lt;h4 id="再起動の開始と終了に合わせて通知を飛ばす">再起動の開始と終了に合わせて通知を飛ばす&lt;/h4>
&lt;p>&lt;code>restart-ark-dedicated.service&lt;/code>を再び編集し、&lt;code>ExecStartPre&lt;/code>で&lt;code>ExecStart&lt;/code>の実行前に、&lt;code>ExecStartPost&lt;/code>で&lt;code>ExecStart&lt;/code>の実行後に走らせるコマンドをそれぞれ指定します。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-restart-ark-dedicated.service(編集後)" data-lang="restart-ark-dedicated.service(編集後)">[Unit]
Description=Restart ark-dedicated.service
[Service]
Type=oneshot
ExecStartPre=/usr/bin/curl -X POST -H &amp;#39;Content-Type: application/json&amp;#39; -d &amp;#39;{&amp;#34;content&amp;#34; : &amp;#34;[定期]サーバ再起動開始&amp;#34;}&amp;#39; webhookのurl
ExecStart=/bin/systemctl try-restart ark-dedicated.service
ExecStartPost=/usr/bin/curl -X POST -H &amp;#39;Content-Type: application/json&amp;#39; -d &amp;#39;{&amp;#34;content&amp;#34; : &amp;#34;[定期]サーバ再起動完了&amp;#34;}&amp;#39; webhookのurl
&lt;/code>&lt;/pre>&lt;h3 id="おわりに">おわりに&lt;/h3>
&lt;p>このままだと再起動開始通知から速攻で再起動処理が動くのであんまりよくない。
人に優しくありたいなら30分とか1時間前に通知するようにしましょう。&lt;/p>
&lt;h3 id="参考">参考&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://wiki.archlinux.jp/index.php/Systemd">systemd - ArchWiki&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.jp/index.php/Systemd/%E3%82%BF%E3%82%A4%E3%83%9E%E3%83%BC">systemd/タイマー - ArchWiki&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://discord.com/developers/docs/resources/webhook#execute-webhook-jsonform-params">Discord Developer Portal — Documentation — Webhook&lt;/a>&lt;/li>
&lt;/ul></content></item></channel></rss>