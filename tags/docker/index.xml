<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on blog</title><link>/tags/docker/</link><description>Recent content in docker on blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 28 Mar 2022 02:30:00 +0900</lastBuildDate><atom:link href="/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Dockerfileを書いてみよう</title><link>/posts/how-to-write-a-dockerfile/</link><pubDate>Mon, 28 Mar 2022 02:30:00 +0900</pubDate><guid>/posts/how-to-write-a-dockerfile/</guid><description>はじめに Dockerfileを使ったイメージの作成と起動について人に教える機会も増えてきたこともあり、毎回アドリブでやるのもつらいし日によって質のブレも出てくるので、ここらでいったん文書化することにしました。 想定読者はDockerなんもわからんのでやってみながら覚えたい、ふだんはアプリを書くのがメインな人です。 基本的なshellでの操作(cd, mv, cpなど)はできるものとし、また、Dockerはイン</description><content>&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>Dockerfileを使ったイメージの作成と起動について人に教える機会も増えてきたこともあり、毎回アドリブでやるのもつらいし日によって質のブレも出てくるので、ここらでいったん文書化することにしました。&lt;br>
想定読者はDockerなんもわからんのでやってみながら覚えたい、ふだんはアプリを書くのがメインな人です。&lt;br>
基本的なshellでの操作(cd, mv, cpなど)はできるものとし、また、&lt;code>Docker&lt;/code>はインストール済みのものとします。&lt;code>compose v2&lt;/code>および&lt;code>docker-compose&lt;/code>には触れません。&lt;br>
最終的に簡単な(&lt;strong>ここ重要&lt;/strong>)スクリプト言語の実行環境を作るためのDockerfileを書くことができるようになることが目的です。
題材にはPythonを使います。楽なので。&lt;br>
また、この記事で実行するコマンドはlinux上で実行されています。実行環境によって出力が異なることがありますが、その場合は適宜読み替えをお願いします。&lt;/p>
&lt;h2 id="目次">目次&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="#docker%E3%81%A8%E3%81%AF">Dockerとは？&lt;/a>&lt;/li>
&lt;li>&lt;a href="#dockerfile%E3%82%92%E6%9B%B8%E3%81%84%E3%81%A6%E3%81%84%E3%81%8F">Dockerfileを書いていく&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#2%E8%A1%8C%E3%81%A7%E5%85%A5%E9%96%80%E3%81%99%E3%82%8B">2行で入門する&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%87%AA%E5%88%86%E7%94%A8%E3%81%AB%E3%82%BF%E3%82%B0%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B">自分用にタグを設定する&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E3%82%BD%E3%83%BC%E3%82%B9%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AB%E5%90%8C%E6%A2%B1%E3%81%97%E3%81%A6%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%8B%E3%82%89%E5%AE%9F%E8%A1%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B">ソースファイルをコンテナに同梱して、ファイルから実行できるようにする&lt;/a>&lt;/li>
&lt;li>&lt;a href="#arg%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86">ARGを使ってみよう&lt;/a>&lt;/li>
&lt;li>&lt;a href="#pip%E3%82%92%E4%BD%BF%E3%81%86">pipを使う&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB">終わりに&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="dockerとは">Dockerとは？&lt;/h2>
&lt;p>そもそもDockerとは？ についてです。&lt;br>
&lt;a href="https://docs.docker.com/get-started/overview/">公式&lt;/a>ドキュメントからわかりやすい部分を引用します(引用は&lt;a href="https://docs.docker.jp/get-started/overview.html">有志日本語訳&lt;/a>)。&lt;/p>
&lt;blockquote>
&lt;p>Docker はアプリケーションの開発、導入、実行を行うためのオープンなプラットフォームです。Docker を使えば、アプリケーションをインフラストラクチャーから切り離すことができるため、ソフトウエアをすばやく提供することができます。Docker であれば、アプリケーションを管理する手法をそのまま、インフラストラクチャーの管理にも適用できます。&lt;/p>
&lt;/blockquote>
&lt;p>これは、より簡単に、こう言い換えることができます。&lt;br>
&lt;em>Dockerは、任意の必要なソフトウェアだけでアプリケーションの実行を可能&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>にし、開発・運用を簡単にすることが&lt;strong>できる&lt;/strong>ものです&lt;/em>。&lt;/p>
&lt;p>&lt;code>任意の必要なソフトウェアだけでアプリケーションの実行を可能にする&lt;/code>とはどういうことでしょうか。&lt;br>
一般的に、アプリケーションの実行環境は複数のソフトウェアの集合です。たとえば、「Hello World!」とだけ書かれたwebページを返すだけのPythonで書かれたアプリのことを考えてみてください。これを、Dockerではない通常のLinux環境で実行する場合、どれくらいのソフトウェアが必要になるでしょうか。&lt;br>
私もすべてを挙げることはできませんが、すぐに思いつく範囲では下記のようなものがあります。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Python&lt;/code>(当然ですね)&lt;/li>
&lt;li>&lt;code>sshd&lt;/code> or &lt;code>ftp&lt;/code>(コードをデプロイするのに必要です)&lt;/li>
&lt;li>なにかしらのネットワークマネージャ&lt;/li>
&lt;li>上記のソフトウェアをインストールするためのパッケージマネージャ(&lt;code>apt&lt;/code>や&lt;code>pacman&lt;/code>)&lt;/li>
&lt;li>上記のソフトウェアを実行するためのプロセス管理システム(&lt;code>init.d&lt;/code>や&lt;code>systemd&lt;/code>)&lt;/li>
&lt;li>linux kernel&lt;/li>
&lt;/ul>
&lt;p>上記のソフトウェア群はそれぞれが動作のために別のソフトウェアを要求します。アプリケーションを運用するということは、大量のソフトウェアを運用することです。&lt;br>
どこまで厳密にやるかはともかく、パフォーマンスのため、セキュリティレベル維持のため、アプリケーションのソースコードに加えて、これらのうちある程度の管理が必要ということです。具体的には&lt;code>Ansible&lt;/code>や&lt;code>Chef&lt;/code>などの構成管理ツールや&lt;code>cloud-init&lt;/code>などを利用してサーバの状態を一定にしたり、カーネルのバージョンアップをしたり&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>です。&lt;br>
このレイヤーの出来事はアプリケーションの健全な実行に必要ですが、開発者としては若干別領域、たとえばインフラエンジニアやSREの領域に見えるため、本格的にやるにはちょっと躊躇する部分かもしれません。&lt;br>
ところが、この部分を開発者以外に任せることにすると、別の複数の問題が発生します。たとえば、ミドルウェアレベルの構成変更にチーム外の人間とのやりとりが必要になったり、アプリケーション実行環境の全体像がアプリケーション開発者にぼんやりとしか見えなくなったりです。これらは最終的に開発速度の低下を引き起こします。&lt;/p>
&lt;p>そこで、Dockerの出番というわけです。&lt;br>
Docker&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>を利用することで、深いlinuxサーバの知識がなくとも、実行環境を簡単な定義ファイル&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>だけで整えることができるようになります。&lt;/p>
&lt;p>とだけ書くと、まるで夢のような技術に聞こえてしまうのですが、ここで先ほどのテキストの太字部分を思い出してください。&lt;/p>
&lt;blockquote>
&lt;p>開発・運用を簡単にすることが&lt;strong>できる&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>できる&lt;/strong>とあります。&lt;strong>簡単になる&lt;/strong>ではないことに留意してください。&lt;br>
DockerにはDockerの作法があり、作法を逸脱するとわりとつらい思いをします。コンテナの概念に慣れていないと、この作法の逸脱をしてしまいがちです。Dockerの不便さを解消しようとするまえに、あなたが不便に思うこと、そして解消したいことがコンテナの考え方に反していないかを考えてみてください。少しオーウェル的ですが、その不便さこそがコンテナの利便性を提供しているものかもしれません&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>それでは、やっていきましょう&lt;/p>
&lt;h2 id="dockerfileを書いていく">Dockerfileを書いていく&lt;/h2>
&lt;p>扱うファイルが多いので、あらかじめできあがったものを公開しています。必要に応じて参照したり、cloneしてご利用ください。&lt;br>
&lt;a href="https://github.com/kei-s16/blog-docker-examples">kei-s16/blog-docker-examples&lt;/a>&lt;/p>
&lt;h3 id="2行で入門する">2行で入門する&lt;/h3>
&lt;p>このセクションのサンプルは&lt;a href="https://github.com/kei-s16/blog-docker-examples/tree/main/example1">example1&lt;/a>にあります。&lt;/p>
&lt;p>Dockerコンテナを起動するためにはコンテナイメージと呼ばれるものが必要で、コンテナイメージを作るためにはDockerfileという定義ファイルを書いてあげる必要があります。このセクションでは、この一連の流れを体験しましょう。&lt;/p>
&lt;p>まずはDockerfileを書いて、コンテナイメージをビルドし、コンテナを立ち上げるためだけの小さなPythonコードを考えます。&lt;br>
最初から大きくやるとたいてい失敗するので、極端なほど小さく始めましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>はい、Hello Worldです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python -c &lt;span style="color:#e6db74">&amp;#39;print(&amp;#34;Hello World!&amp;#34;)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% python -c &lt;span style="color:#e6db74">&amp;#39;print(&amp;#34;Hello World!&amp;#34;)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hello World!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>まごうことなきHello Worldですね。&lt;br>
まずはこのコマンドをそのままコンテナ環境で実行できるようにしていきましょう。&lt;br>
作業ディレクトリに、Dockerfileという名前のファイルを作成し、内容を下記の通りに編集してください。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> python:3.10.4-bullseye&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-c&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;print(&amp;#39;Hello World!&amp;#39;)&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>1行目は、&lt;code>FROM&lt;/code>というベースとなるイメージを取得してくるコマンドを実行しています。値として、&lt;code>イメージ名:タグ(任意)&lt;/code>の形式の文字列を与えることで、コンテナレジストリ&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>からイメージをダウンロードしてきます(Dockerではこれを&lt;code>pull&lt;/code>といいます)。また、タグが明示的に指定されなかった場合(今回であれば、&lt;code>FROM python&lt;/code>)には、最新のイメージ(&lt;code>latest&lt;/code>タグのイメージ)が指定されたものとして振る舞います。
今回は、&lt;code>Python&lt;/code>が実行できるイメージのうち、Pythonのバージョンが3.10.4でdebianのbullseyeならだいたい入ってそうなパッケージの詰まったもの(&lt;code>3.10.4-bullseye&lt;/code>)を持ってくるようにしています。&lt;br>
こうしたコンテナイメージは、&lt;a href="https://hub.docker.com/">Dockerhub&lt;/a>で探すことができます。&lt;/p>
&lt;p>2行目は、&lt;code>CMD&lt;/code>コマンドです。&lt;code>CMD&lt;/code>はDockerfileの中で一度しか使えないコマンドで、コンテナ起動時のデフォルトの挙動を定義します。今回はPythonでprintを実行するコマンドをデフォルトで定義しているので、コマンドの上書きをして実行をしなければ、コンテナ起動時にHello World! とプリントされます。&lt;code>CMD&lt;/code>には値として、&lt;code>実行したいコマンドをスペース区切りごとにダブルクォートで括ったもの&lt;/code>を&lt;code>[]&lt;/code>で括った文字列を渡します。&lt;/p>
&lt;p>では、このDockerfileをビルドして、ビルドしたイメージを起動してみましょう。&lt;/p>
&lt;p>まずはこのコマンドでビルドします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% docker build -f ./Dockerfile .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>おそらく、末尾に下記のような文言が出力されるはずです。IMAGE IDの部分を控えておいてください。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Successfully built &lt;span style="color:#f92672">{&lt;/span>IMAGE ID&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(ここから追記)&lt;/p>
&lt;p>Docker for Macを使っている場合はこの部分の出力が違うそうです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">=&lt;/span>&amp;gt; exporting to image 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; exporting layers 0.0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; writing image &lt;span style="color:#f92672">{&lt;/span>IMAGE ID&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(ここまで追記)&lt;/p>
&lt;p>次に、このコマンドを実行することでコンテナが起動します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% docker run &lt;span style="color:#f92672">{&lt;/span>IMAGE ID&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>どうですか？ &lt;code>Hello World!&lt;/code> と出力され、正常に処理が終了したためコンテナも終了し、ターミナルに戻ったはずです。Dockerfileを書いて、コンテナイメージをビルドし、コンテナを立ち上げるという一連の流れを体験することができましたね！&lt;/p>
&lt;h3 id="自分用にタグを設定する">自分用にタグを設定する&lt;/h3>
&lt;p>ところで、先ほどの手順でIMAGE IDを利用するのが面倒ではありませんでしたか？&lt;br>
実は、&lt;code>--tag&lt;/code>(省略形は&lt;code>-t&lt;/code>)オプションを使うことで自分用にタグをつけることができ、そのタグを使ってコンテナイメージを指定することができます。
たとえばこんな感じです。&lt;/p>
&lt;pre tabindex="0">&lt;code>% docker build -f ./Dockerfile --tag=&amp;#34;python-tutorial:step1&amp;#34;.
% docker run python-tutorial:step1
&lt;/code>&lt;/pre>&lt;h3 id="ソースファイルをコンテナに同梱してファイルから実行できるようにする">ソースファイルをコンテナに同梱して、ファイルから実行できるようにする&lt;/h3>
&lt;p>このセクションのサンプルは&lt;a href="https://github.com/kei-s16/blog-docker-examples/tree/main/example2">example2&lt;/a>にあります。&lt;/p>
&lt;p>さきほどの手順では、コマンドラインから渡す形式でしかPythonスクリプトを実行することができませんでした。&lt;br>
しかし、実際のアプリケーションは複数のコマンドからなるため、ファイルにまとめられているはずです。さきほどの手順では、本格的なアプリケーションが実行できないのです&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>。&lt;br>
というわけで、このセクションではソースファイルからアプリを実行できるDockerコンテナを作成してみます。&lt;/p>
&lt;p>前のセクションで使ったDockerfileを編集するか、新しく作業ディレクトリを作成してDockerfileという名前のファイルを作成するかのどちらかを実施し、内容を下記の通りにしてください(改行は省略してもかまいません)。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> python:3.10.4-bullseye&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /usr/src/app&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> ./src .&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;./main.py&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>その後、Dockerfileのあるディレクトリに&lt;code>src&lt;/code>という名前のディレクトリを作成し、その中に&lt;code>main.py&lt;/code>というファイルを作成してください。中身は下記のように編集してください。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>さて、ここまでの手順で、作業ディレクトリの構造はこのようになっているはずです。&lt;/p>
&lt;pre tabindex="0">&lt;code>- 作業ディレクトリ
- Dockerfile
- src
- main.py
&lt;/code>&lt;/pre>&lt;p>ディレクトリの中身が正しいことを確認したら、下記のコマンドを実行して、どうなるか見てみましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code>% docker build -f ./Dockerfile --tag=&amp;#34;python-tutorial:step2&amp;#34; .
% docker run python-tutorial:step2
&lt;/code>&lt;/pre>&lt;p>どうでしたか？ &lt;code>Hello World!&lt;/code> と出力されましたか？&lt;/p>
&lt;p>ではここで、Dockerfileの中に書いた、新しいコマンドについて説明します。&lt;br>
&lt;code>WORKDIR&lt;/code>は、Dockerfileに書かれたコマンドを実行するディレクトリを変更するコマンドです。たとえば、&lt;code>WORKDIR /usr/src/app&lt;/code>を実行したあとの処理で&lt;code>pwd&lt;/code>を実行すれば&lt;code>/usr/src/app&lt;/code>と出力されますし、&lt;code>cat ./hoge&lt;/code>とすれば&lt;code>/usr/src/app/hoge&lt;/code>を出力しようとします。また、&lt;code>WORKDIR&lt;/code>で存在するディレクトリを指定するとそのディレクトリに移動するだけですが、存在しないディレクトリを指定した場合は、移動先のディレクトリを作成してから移動します。&lt;br>
&lt;code>COPY&lt;/code>は、コンテナをビルドする環境のファイルシステムから、コンテナに対してファイルをコピーするコマンドです。&lt;code>COPY ./src .&lt;/code>は、ビルド環境のカレントディレクトリにある&lt;code>src&lt;/code>ディレクトリを、コンテナのカレントディレクトリにコピーすることを意味します。&lt;/p>
&lt;p>これを踏まえて今回のDockerfileを読むと、&lt;/p>
&lt;ol>
&lt;li>&lt;code>/usr/src/app&lt;/code>に移動する&lt;/li>
&lt;li>ホストマシンの&lt;code>./src&lt;/code>から&lt;code>/usr/src/app&lt;/code>にファイルをコピーする&lt;/li>
&lt;li>デフォルトでは&lt;code>python /usr/src/app/main.py&lt;/code>を実行するように設定する&lt;/li>
&lt;/ol>
&lt;p>という処理がビルド時に実行されることがわかります。&lt;/p>
&lt;p>注意点として、あたりまえですが&lt;code>COPY&lt;/code>したファイルはコンテナイメージに含まれます。コンテナイメージをダウンロードした人は誰でもコンテナの中に置かれたファイルを見ることができるようになるということです。業務でも個人プロジェクトでもそうですが、機密情報はコンテナイメージの外(S3やDBなど)に持つようにする、&lt;code>ENV&lt;/code>コマンドを使うことで環境変数として起動時に初めて渡すようにし、イメージ内部には持たないようにするなどしましょう。そもそも機密を含むものが誰でも利用できるようになること自体避けたいわけですが(プロダクション用のイメージなどはプライベートレジストリを使うべきです)。&lt;/p>
&lt;h3 id="argを使ってみよう">ARGを使ってみよう&lt;/h3>
&lt;p>ここまで書いたDockerfileはすべてタグを固定で書いています。別のイメージを試したくなったときはDockerfileに手を加える必要があるわけですが、試すだけなのにエディタを開くのはちょっとおっくうです。&lt;br>
そこで、ビルドコマンドの引数でタグを渡してあげればいい感じに&lt;code>FROM&lt;/code>で持ってくるイメージを変えることができるようにしてみましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ARG&lt;/span> TAG&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3.10.4-bullseye&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> python:$TAG&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /usr/src/app&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> ./src .&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;./main.py&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>新しく追加した&lt;code>ARG&lt;/code>コマンドは、ビルド時に受けつける追加の引数名と、そのデフォルト値を定義できるコマンドです。例では、&lt;code>TAG&lt;/code>という引数を受けつけるようにし、その引数が与えられなかった場合は&lt;code>python:3.10.4-bullseye&lt;/code>が与えられたものとして振る舞うように設定されています。そして、&lt;code>TAG&lt;/code>は&lt;code>FROM&lt;/code>コマンドで利用されています。これで、ビルド時の引数としてイメージタグを受け取れるようになったわけです。&lt;br>
引数は&lt;code>--build-arg&lt;/code>オプションで与えます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>% docker build -f ./Dockerfile --tag&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;python-tutorial:extra&amp;#34;&lt;/span> --build-arg TAG&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;3.11-rc-bullseye&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ユースケースとしては、上記の例のように実行環境を気軽に上げて検証できるようにする、などがあります。その他にも、様々な使い方があります。いずれ活用してみてください。&lt;/p>
&lt;h3 id="pipを使う">pipを使う&lt;/h3>
&lt;p>このセクションのサンプルは&lt;a href="https://github.com/kei-s16/blog-docker-examples/tree/main/example3">example3&lt;/a>にあります。&lt;/p>
&lt;p>ここまでである程度ちゃんとしたPythonの実行を作成できるようになりましたが、なにか抜けていませんか？ そう、外部パッケージの利用です。&lt;br>
愚直な方法はビルドを実行するマシンで&lt;code>pip install&lt;/code>して、それを参照することですが、なんというかいろいろ問題がありますね。pipを使ううまみがほとんどないというか……。&lt;br>
でも、現時点で私たちが知っているビルドにコマンドを実行する方法は&lt;code>CMD&lt;/code>コマンドだけです。ここにコマンドを書いても、実行時コマンドの上書きで実行されない可能性がありますし、なにより&lt;code>CMD&lt;/code>はDockerfileのなかで一度しか使うことができません。&lt;br>
というわけで、&lt;code>CMD&lt;/code>以外のコマンドを使って、コンテナらしくビルド中に&lt;code>pip&lt;/code>を使えるようにし、コンテナ上のPythonで外部パッケージを扱ってみましょう。&lt;/p>
&lt;p>今回は、&lt;a href="https://pypi.org/project/colorama/">colorama&lt;/a>を利用して、文字列を赤く出力してみます。&lt;br>
&lt;a href="https://github.com/kei-s16/blog-docker-examples/tree/main/example3">example3&lt;/a>を参考に、お手元に必要なファイルを用意し、ビルドと実行をしてみてください。うまくいけば、赤文字でHello World! と表示されるはずです。&lt;/p>
&lt;p>さて、どうやって&lt;code>pip install&lt;/code>と&lt;code>python main.py&lt;/code>のふたつを実行できるようにしたのでしょうか？ 答えはこの行にあります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">RUN&lt;/span> pip install --no-cache-dir -r requirements.txt&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここで登場する&lt;code>RUN&lt;/code>というコマンドは、コンテナのビルドの途中で任意のコマンドを実行するために使われます。&lt;code>CMD&lt;/code>と違い、コマンドはふだんシェルで入力する形で与えることもできます。&lt;code>CMD&lt;/code>で実行する処理に必要な前準備は、&lt;code>RUN&lt;/code>を使って記述します。たとえば、今回のようなアプリケーションが利用する外部パッケージのインストールのほか、外部サービスから設定をダウンロードしてきたり、ソースコードから実行可能なバイナリをビルドしたりするのには&lt;code>RUN&lt;/code>コマンドを使うといいと思います&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>。&lt;/p>
&lt;h2 id="終わりに">終わりに&lt;/h2>
&lt;p>今回は、基本的なアプリケーションを実行するために必要な最低限のDockerfile知識をまとめました。&lt;br>
この次のステップは、自分のサービスを動かしてみることになると思います。そのステップをやりきるには、この記事にある情報だけでは難しいと思います。公式ドキュメントに軽く目を通しながら進めていくことを強くおすすめします。&lt;br>
また、記事では触れませんでしたが、リポジトリには&lt;code>ステージ&lt;/code>とそれを活用した&lt;code>マルチステージビルド&lt;/code>の例も置いています&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>。気になる方はどうぞ。&lt;/p>
&lt;p>コメントや誤りの連絡は、&lt;a href="https://github.com/kei-s16/kei-s16.github.io/issues/new">issue&lt;/a>にお願いします。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>厳密には、&lt;code>カーネルレベルの依存関係をすべてホストマシンに委ねることで、Dockerを利用している開発者の視点では任意の必要なソフトウェアだけでのアプリケーションの実行が可能になっているように見える&lt;/code>。Dockerの実行環境自身がときどきこのあたり意識することを要求してくる。ECSやCloud Runなどのマネージドなコンテナ実行環境を利用するなら、この部分はクラウド事業者が管理してくれるのである程度無視できる。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>このセクションには理想が多分に含まれている。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>厳密にはコンテナ仮想化技術。&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>誰向けなのかわからない注釈 : Vagrantfileのようなものを想像するとわかりやすい。&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>なんでこんなことを書いているのかって？ ひどい目にあったからですよ(なんもわかってないときに書いたDockerfileを直しながら)。&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>タグだけ与えた場合はデフォルトではDockerhubから取得してくる。URIを与えることで、任意のコンテナレジストリ&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>から取得することができる。&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>ここでワンライナーを持ち出すのはやめてください。&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>とはいえ、&lt;code>RUN&lt;/code>にはビルドの仕組みを知らないとひっかかりやすい落とし穴があったりする。ガリガリ書き始めるまえに、公式ドキュメントを読むことをおすすめします。&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9" role="doc-endnote">
&lt;p>途中で力尽きたとも言う。想定読者的にはまだいらんじゃろという気持ちもある&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10" role="doc-endnote">
&lt;p>Elastic Container Registry, Github Contgainer Registry, 自宅に立てたオレオレレジストリなど。&amp;#160;&lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content></item></channel></rss>