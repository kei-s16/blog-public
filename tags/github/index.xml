<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitHub on blog</title><link>/tags/github/</link><description>Recent content in GitHub on blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 21 Feb 2022 01:00:00 +0900</lastBuildDate><atom:link href="/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>Github PagesにHugoをデプロイする</title><link>/posts/hugo-on-github-pages/</link><pubDate>Mon, 21 Feb 2022 01:00:00 +0900</pubDate><guid>/posts/hugo-on-github-pages/</guid><description>目次 前置き 背景 選定 やっていき 設計 実装 Hugo GitHubActions GitHub Pagesの設定 完走した感想 前置き 背景 gistなどで管理していたもろもろのメモをもうちょっときれいに見せたくなったので、ブログ形式で残すことにしました。 が、今日日どっかのブログサービスもなーでも自前でWordPressなんかもちょっとキツいなーという感じです。 これだけで伝わらないと思うので、気持ち的な要件をリストアップすると、こんな感じ。 テキストがブラウザ</description><content>&lt;h2 id="目次">目次&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="#%E5%89%8D%E7%BD%AE%E3%81%8D">前置き&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#%E8%83%8C%E6%99%AF">背景&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%81%B8%E5%AE%9A">選定&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#%E3%82%84%E3%81%A3%E3%81%A6%E3%81%84%E3%81%8D">やっていき&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#%E8%A8%AD%E8%A8%88">設計&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%AE%9F%E8%A3%85">実装&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#hugo">Hugo&lt;/a>&lt;/li>
&lt;li>&lt;a href="#github-actions">GitHubActions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#github-pages%E3%81%AE%E8%A8%AD%E5%AE%9A">GitHub Pagesの設定&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#%E5%AE%8C%E8%B5%B0%E3%81%97%E3%81%9F%E6%84%9F%E6%83%B3">完走した感想&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="前置き">前置き&lt;/h2>
&lt;h3 id="背景">背景&lt;/h3>
&lt;p>gistなどで管理していたもろもろのメモをもうちょっときれいに見せたくなったので、ブログ形式で残すことにしました。&lt;br>
が、今日日どっかのブログサービスもなーでも自前でWordPressなんかもちょっとキツいなーという感じです。&lt;br>
これだけで伝わらないと思うので、気持ち的な要件をリストアップすると、こんな感じ。&lt;/p>
&lt;ol>
&lt;li>テキストがブラウザ上で快適に読める状態であればそれでいい。コメントとかいらない。&lt;/li>
&lt;li>特定のサービスに依存する形にしたくない。なにかあったときは最悪自前で気楽に(ここ重要)ホスティングできるようにしたい。&lt;/li>
&lt;li>セキュリティ周りをなるべく意識したくない。ログイン画面隠したりCMSのバージョン気にしたりしたくない。&lt;/li>
&lt;/ol>
&lt;p>もうこれ、静的サイトジェネレーター(SSG)しかないじゃん、ということで、そうしました。&lt;/p>
&lt;h3 id="選定">選定&lt;/h3>
&lt;p>候補は2つありました。&lt;br>
1つは&lt;a href="https://www.getzola.org/">Zola&lt;/a>。Rust製のSSGツールになります。&lt;br>
もうひとつは&lt;a href="https://gohugo.io/">Hugo&lt;/a>。こちらはGo製。&lt;br>
どちらもmarkdownのテキストファイルからブログの形をしたhtmlを吐き出してくれるツールです。&lt;br>
ドキュメントをさっと読んだ感じではZolaもHugoも機能的にはあまり差がなさそうでした。開発の活発度合いも変わりなく、強いて言えば数年先行しているHugoのほうが英語・日本語ともにドキュメントが見つかりやすい雰囲気です。&lt;br>
&lt;del>宗教&lt;/del>好みで言えばZolaですが、今回はサクっとやってしまいたかったので、Hugoをチョイスしました。&lt;/p>
&lt;p>サーバというか配信にはGitHub Pagesを使用することにします。&lt;br>
無料だしGitHub Actionsでいろいろできるし、なにより必然的にGitHubリポジトリで管理する = 手持ちの端末どれからでも投稿ができる。&lt;/p>
&lt;h2 id="やっていき">やっていき&lt;/h2>
&lt;h3 id="設計">設計&lt;/h3>
&lt;p>&lt;img src="/images/hugo-on-github-pages/githubpages.png" alt="全体の図">&lt;/p>
&lt;p>こんな感じにすることにします。&lt;br>
mdファイル(というかソース)を管理するリポジトリと、公開用のリポジトリを分けているのは、なんとなくです。分ける必要もないと思うっちゃ思うのですが、せっかくだからわけることにしました。やったことでゴミみたいなコミットしてるのが外には見えないのでそれはメリットかも。&lt;/p>
&lt;h3 id="実装">実装&lt;/h3>
&lt;h4 id="hugo">Hugo&lt;/h4>
&lt;p>Hugo側の設定はあまり気にすることがありません。&lt;br>
強いて言えばテーマをどう管理するかくらいですが、外部テーマを使う場合はgit submoduleを使うことが推奨されているようです。&lt;br>
今回私が選んだテーマは&lt;a href="https://github.com/panr/hugo-theme-terminal">panr/hugo-theme-terminal&lt;/a>です。こちらもREADMEにて手の込んだ改変をしない限りはgit submoduleを使うことを推奨していました。テーマを触る気はいまのところあんまりないので、submoduleを利用するパターンを採用します。&lt;/p>
&lt;h4 id="github-actions">GitHub Actions&lt;/h4>
&lt;p>GitHub Actions、つまりはデプロイ=記事の投稿です。&lt;br>
&lt;a href="https://rmoff.net/2020/12/20/scheduling-hugo-builds-on-github-pages-with-github-actions/">Scheduling Hugo Builds on GitHub pages with GitHub Actions&lt;/a>という記事を参考に、ちょっと手を入れたデプロイを組んでいます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">push&lt;/span>:
&lt;span style="color:#f92672">branches&lt;/span>:
- &lt;span style="color:#ae81ff">main&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">build-and-deploy&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">checkout source&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">submodules&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">remove .gitignore&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">rm ./.gitignore&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">setup hugo&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;latest&amp;#39;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">build&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --minify&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">copy verify files to public&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">cp ./verify/* ./public&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">deploy&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v3&lt;/span>
&lt;span style="color:#f92672">if&lt;/span>: &lt;span style="color:#ae81ff">${{ github.ref == &amp;#39;refs/heads/main&amp;#39; }}&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">deploy_key&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/span>
&lt;span style="color:#f92672">external_repository&lt;/span>: &lt;span style="color:#ae81ff">kei-s16/kei-s16.github.io&lt;/span>
&lt;span style="color:#f92672">publish_dir&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;span style="color:#f92672">publish_branch&lt;/span>: &lt;span style="color:#ae81ff">main&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>やっていることは元記事と同じくhugoでビルドして、公開用リポジトリにpushしているだけです。&lt;br>
違うところはといえば、&lt;/p>
&lt;ul>
&lt;li>私の場合はgitignoreでソースリポジトリに生成物を持たない(public以下を持たない)ようにしているため、そこをごにょごにょするための処理を追加した&lt;/li>
&lt;li>GitHub Pagesで独自ドメインを当てたり、keybaseの認証をしたりするのに必要なファイル(verify以下)を一緒にデプロイしている&lt;/li>
&lt;li>公開リポジトリには生成物(public以下)しか持たないようにした&lt;/li>
&lt;/ul>
&lt;p>の3点です。&lt;br>
上記のコードにより、mainブランチにmdファイルやらなにやらをマージすることで、公開リポジトリにhtmlファイルを送りつけてくれるようになりました。&lt;/p>
&lt;h4 id="github-pagesの設定">GitHub Pagesの設定&lt;/h4>
&lt;p>&lt;code>{ユーザ名}.github.io&lt;/code>ドメインのままで問題なければ、リポジトリのsettingsからpagesを有効にするだけです。&lt;br>
独自ドメインを当てたい場合は公式ドキュメントを参考にしつつ、&lt;code>{ユーザ名}.github.io&lt;/code> に対する独自ドメインのCNAMEレコードを作成してください。&lt;br>
注意が必要なのが、ドメインの検証に時間がかかることと、HTTPSでの接続を有効にするのにさらに時間がかかることです。時間に余裕を持って作業しましょう。&lt;/p>
&lt;h2 id="完走した感想">完走した感想&lt;/h2>
&lt;ul>
&lt;li>Pull-Requestベースで管理できるのめっちゃ楽&lt;/li>
&lt;li>vimで書けるのめっちゃ楽&lt;/li>
&lt;li>DBのバージョンとかPHPのバージョンとかCMSのバージョンとかプラグインのバージョンとか気にしなくていいのほんと楽&lt;/li>
&lt;/ul></content></item></channel></rss>