<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022/11 on blog</title><link>/archives/2022/11/</link><description>Recent content in 2022/11 on blog</description><generator>Hugo -- gohugo.io</generator><atom:link href="/archives/2022/11/index.xml" rel="self" type="application/rss+xml"/><item><title>Dagger.ioを使ってみた</title><link>/posts/build-ci-cd-pipeline-with-dagger/</link><pubDate>Mon, 21 Nov 2022 00:00:00 +0900</pubDate><guid>/posts/build-ci-cd-pipeline-with-dagger/</guid><description>前置き Dagger.ioというCI/CDパイプラインエンジンがある。 世の中にはGitHub ActionsやAWS CodeBuild, Circle CIなど、さまざまなCI/CDサービスがある。これらはそれぞれ記法が違ったり実行環境に制限があったりと、サービス提供者ごとに良くも悪くも差別化がされている。 どのサービスも使いやすく、便利だったりするが、トレードオフとしてローカルでワークフローのテストができなかったり、他のサービスへの</description><content>&lt;h2 id="前置き">前置き&lt;/h2>
&lt;p>&lt;a href="https://dagger.io/">Dagger.io&lt;/a>というCI/CDパイプラインエンジンがある。&lt;/p>
&lt;p>世の中にはGitHub ActionsやAWS CodeBuild, Circle CIなど、さまざまなCI/CDサービスがある。これらはそれぞれ記法が違ったり実行環境に制限があったりと、サービス提供者ごとに良くも悪くも差別化がされている。&lt;br>
どのサービスも使いやすく、便利だったりするが、トレードオフとしてローカルでワークフローのテストができなかったり、他のサービスへの移行&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>が難しかったりする。&lt;br>
Dagger.ioは、そういうのをなんとかしてポータビリティが高いCI/CDパイプラインを作っちゃおうぜ、というもの。なんかDockerっぽいよね。&lt;a href="https://www.publickey1.jp/blog/22/dockerdaggergithubcircleci.html">Dockerの人が作ってるからね&lt;/a>。&lt;/p>
&lt;p>最初はCue言語でしかワークフローが書けなかった(はず)でちょっと足踏みしていたが、いつのまにか&lt;a href="https://docs.dagger.io/sdk/go">GoのSDK&lt;/a>や&lt;a href="https://docs.dagger.io/sdk/python">PythonのSDK&lt;/a>が追加されていた。&lt;br>
&lt;a href="https://github.com/kei-s16/techblog-linter-settings/issues/4">個人的にCIを作る必要があった&lt;/a>ので、せっかくだしということで今回DaggerのGo SDKを使って組んでみた。&lt;/p>
&lt;p>この記事はその記録ということになる。&lt;/p>
&lt;h2 id="daggerioの仕組み">Dagger.ioの仕組み&lt;/h2>
&lt;p>だいたい下記の図のとおり。&lt;br>
SDK対応の好きな言語でワークフローを書き、好きな言語で実行するとコンテナ上で実行されるという仕組み。他のCI/CDサービスとおおむね同じ。&lt;/p>
&lt;p>&lt;img src="/images/build-ci-cd-pipeline-with-dagger/dagger.png" alt="おおまかなDagger.ioの実行フロー">&lt;/p>
&lt;p>ワークフローと実行コンテナの間にDagger Engineというのがいる。&lt;br>
これはGitHub ActionsやCodeBuild、CircleCIなどの実行環境に相当するもの。&lt;br>
ユーザに対してはDaggerのAPIの提供、コンテナ側に対してはコンテナの起動・破棄やコマンドの伝達を行なっている(と思われる)。&lt;br>
Dagger Engineは非公開の部分も多く、いまのところはSDKの範囲にない部分の公開ドキュメントは存在しないよ、というのが公式の見解。&lt;/p>
&lt;h2 id="ワークフローをgoで書く">ワークフローをGoで書く&lt;/h2>
&lt;p>仕組みもわかったところで、さっそく実装してみる。&lt;/p>
&lt;p>&lt;a href="/posts/textlint-template">前回の記事&lt;/a>にも書いたが、最近textlintを使って日本語をいい感じにlintするやつをちまちまいじっている。&lt;br>
このブログもそのlinterを通すことにしたのだが、さすがに手動は……ということで、今回はDaggerでこれのCIを組みたい。&lt;br>
いちおうこのブログ自体、特定のサービスに依存せず、最悪自前でホスティングできるように意識して作っているので、Daggerとの思想的な相性もいい。&lt;br>
言語は慣れていないが諸事情によりGoを選択した(Rustに対応してたらそっちを選んでいたと思う)。&lt;/p>
&lt;p>最終的にできあがったものは&lt;a href="https://github.com/kei-s16/techblog-linter-settings">kei-s16/techblog-linter-settings&lt;/a>にある。&lt;/p>
&lt;h3 id="プロジェクトを立ち上げる">プロジェクトを立ち上げる&lt;/h3>
&lt;p>プロジェクトを立ち上げる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ go mod init dagger
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>その後、&lt;a href="https://docs.dagger.io/sdk/go/371491/install">公式ドキュメント&lt;/a>にしたがって依存パッケージを追加する。&lt;br>
現状dockerパッケージの追加におまじないが必要らしいので、そちらも実行する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ go get dagger.io/dagger@latest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ go mod edit -replace github.com/docker/docker&lt;span style="color:#f92672">=&lt;/span>github.com/docker/docker@v20.10.3-0.20220414164044-61404de7df1a+incompatible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ go mod tidy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最後にファイルを作る。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ touch main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ワークフローを書く">ワークフローを書く&lt;/h3>
&lt;p>ワークフローはだいたい3段階からなる。&lt;/p>
&lt;ol>
&lt;li>Daggerクライアントの定義&lt;/li>
&lt;li>Daggerワークフローを実行するコンテナの起動&lt;/li>
&lt;li>Daggerワークフローそのもの&lt;/li>
&lt;/ol>
&lt;p>場合によってはここに前処理として環境変数の読み込みが入ったり、ワークフローの結果を受けて別のワークフローを起動する後処理が入ったりする(のだと思う)。&lt;/p>
&lt;h4 id="daggerクライアントの定義">Daggerクライアントの定義&lt;/h4>
&lt;p>なにをするにもまずDagger Engineとやりとりするクライアントが必要なので、定義する。&lt;br>
クライアントを定義する際に、実行ログをstdoutに出すかどうか、実行ディレクトリをどうするか、などをArgsとして渡すことができる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">client&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dagger&lt;/span>.&lt;span style="color:#a6e22e">Connect&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">dagger&lt;/span>.&lt;span style="color:#a6e22e">WithLogOutput&lt;/span>(&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Stdout&lt;/span>), &lt;span style="color:#a6e22e">dagger&lt;/span>.&lt;span style="color:#a6e22e">WithWorkdir&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;../&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="daggerワークフローを実行するコンテナの起動">Daggerワークフローを実行するコンテナの起動&lt;/h4>
&lt;p>textlintの実行にはnodeの実行環境が必要なので、今回のCIはnodeコンテナ上で実行することにする。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// docker-compose up -dに相当する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Container&lt;/span>().&lt;span style="color:#a6e22e">From&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;node:18.11.0-alpine3.15&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// DockerfileのADDに相当する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">node&lt;/span> = &lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">WithMountedDirectory&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/src&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">projectRoot&lt;/span>).&lt;span style="color:#a6e22e">WithWorkdir&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/src&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="daggerワークフローそのもの">Daggerワークフローそのもの&lt;/h4>
&lt;p>コンテナを起動する処理のあとは、ワークフローを書いていく。&lt;/p>
&lt;p>コマンドを実行するには、コンテナインスタンスに&lt;code>Exec&lt;/code>というFunctionが実装されているので、それを使う。フォーマットはDockerfileのCMDと同じ。&lt;br>
&lt;code>Exec&lt;/code>はGitHub ActionsのStepに相当するものとイメージするとわかりやすく、Daggerのワークフロー出力もExec単位で分割して出力される。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">node&lt;/span> = &lt;span style="color:#a6e22e">node&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Exec&lt;/span>(&lt;span style="color:#a6e22e">dagger&lt;/span>.&lt;span style="color:#a6e22e">ContainerExecOpts&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Args&lt;/span>: []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;npm&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;ci&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Exec&lt;/code>は繋げることができる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">node&lt;/span> = &lt;span style="color:#a6e22e">node&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Exec&lt;/span>(&lt;span style="color:#a6e22e">dagger&lt;/span>.&lt;span style="color:#a6e22e">ContainerExecOpts&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Args&lt;/span>: []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;apk&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;update&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Exec&lt;/span>(&lt;span style="color:#a6e22e">dagger&lt;/span>.&lt;span style="color:#a6e22e">ContainerExecOpts&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Args&lt;/span>: []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;apk&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;add&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;git&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ちなみに、このような書き方は通らないので注意。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">node&lt;/span> = &lt;span style="color:#a6e22e">node&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Exec&lt;/span>(&lt;span style="color:#a6e22e">dagger&lt;/span>.&lt;span style="color:#a6e22e">ContainerExecOpts&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Args&lt;/span>: []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;apk&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;update&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;amp;&amp;amp;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;apk&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;add&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;git&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ExitCode&lt;/code>でステップの処理が通ったかを判定できるので、たとえばチェックに失敗したら&lt;code>--fix&lt;/code>を実行する、ということも可能。&lt;br>
……なのだが、どうもちょっと挙動がおかしいようで、現状はできなさそう&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">node&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Exec&lt;/span>(&lt;span style="color:#a6e22e">dagger&lt;/span>.&lt;span style="color:#a6e22e">ContainerExecOpts&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Args&lt;/span>: []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;npx&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;textlint&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">targetDir&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ExitCode&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// NOTE: ExitCodeが常に0を返してくるので、workaroundでerrの有無で判定する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/kei-s16/techblog-linter-settings/blob/main/dagger/main.go">最終的にこういうものができあがる&lt;/a>。&lt;br>
書いてみて思ったのが、ワークフローを書いている、というよりDockerfileを書いている感覚&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>で、かなり不思議な体験だった。&lt;/p>
&lt;h2 id="ワークフローをローカルで実行する">ワークフローをローカルで実行する&lt;/h2>
&lt;p>ここまでで記述したワークフローは、ローカルでしっかり動かすことができる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ go run main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="/images/build-ci-cd-pipeline-with-dagger/dagger-on-local.png" alt="ローカルで実行して怒られた図">&lt;/p>
&lt;h2 id="ワークフローをgithub-actions上で実行する">ワークフローをGitHub Actions上で実行する&lt;/h2>
&lt;p>そしてこのワークフローはCI/CDサービスのワークフローの中でDaggerを起動することで、そっくりそのまま各種環境でも実行できる(はず)。&lt;br>
サービス側のワークフローで最低限必要なのは、&lt;/p>
&lt;ol>
&lt;li>CI/CDサービスのワークフローに使用言語の実行環境を入れる&lt;/li>
&lt;li>CI/CDサービスのワークフロー上でDaggerなど依存パッケージを入れる&lt;/li>
&lt;li>ローカルで実行したのと同じコマンドを流す&lt;/li>
&lt;/ol>
&lt;p>の3ステップ。必要に応じてAWSやGitHubのトークンを環境変数にセットしたりする手順が挟まる。&lt;br>
見てわかるとおり、Dagger特有の処理が必要なわけではなく、Actions上で特定の言語の実行環境を用意したいケースと同じことをすればいい。&lt;/p>
&lt;p>今回はこんなGitHub Actionsを組んだ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pull_request&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">types&lt;/span>: [&lt;span style="color:#ae81ff">synchronize]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">paths&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">content/posts/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">textlint-ja&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">lint documents&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">checkout source&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">setup go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/setup-go@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">go-version&lt;/span>: &lt;span style="color:#ae81ff">1.19.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">go get&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">go get -v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">working-directory&lt;/span>: &lt;span style="color:#ae81ff">./dagger&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">run dagger ci&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">go run main.go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">working-directory&lt;/span>: &lt;span style="color:#ae81ff">./dagger&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そして実行すると、ローカルと同じ結果が得られた。&lt;/p>
&lt;p>&lt;img src="/images/build-ci-cd-pipeline-with-dagger/dagger-on-github-actions.png" alt="GitHubActionsで実行して怒られた図">&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>使ってみて、&lt;/p>
&lt;ul>
&lt;li>ローカルでCI/CDが実行できる
&lt;ul>
&lt;li>ローカルとCI/CDサービス、どちらで実行してもほぼ同じ結果が得られる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GoやPythonでワークフローを書くことができる
&lt;ul>
&lt;li>(今後)複雑な分岐や並列処理を書くことができる&lt;/li>
&lt;li>アプリケーションエンジニアがちょっとCI/CDを触りたいときの心理的ハードルが低くなる&lt;/li>
&lt;li>yamlよりは圧倒的に可読性が高い&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CI/CD環境を自宅サーバに置くことができそう&lt;/li>
&lt;/ul>
&lt;p>のはおいしいなと思った。一方で、&lt;/p>
&lt;ul>
&lt;li>ちょこちょこ不具合っぽいものがある(暫定対応策も出ているのでまあ……)&lt;/li>
&lt;li>仕様が不明瞭なところがある&lt;/li>
&lt;/ul>
&lt;p>のは微妙な気もする。&lt;br>
とはいえ、できてからまだまだ日が浅いツールで、ガンガン新機能・対応言語が追加されている勢いのよさを考えると、これらはすぐに解消されそう。&lt;/p>
&lt;p>個人プロジェクトにはガンガン導入していきたい。&lt;/p>
&lt;hr>
&lt;p>コメントや誤りの連絡は、&lt;a href="https://github.com/kei-s16/kei-s16.github.io/issues/new">issue&lt;/a>にお願いします。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>CI/CDサービスを移行したいことなんてある？ という向きもあると思うが、&lt;a href="https://forest.watch.impress.co.jp/docs/news/1404282.html">Travis CI(と、heroku)のお漏らしとその事後対応&lt;/a>を思い出してほしい。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>うまい方法を知っている人がいたら教えてください。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>実行環境にDockerを使うのでそれはそうという感じだが&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item></channel></rss>